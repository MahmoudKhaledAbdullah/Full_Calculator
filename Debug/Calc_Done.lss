
Calc_Done.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00003498  0000352c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080019a  0080019a  00003666  2**0
                  ALLOC
  3 .stab         000027f0  00000000  00000000  00003668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f22  00000000  00000000  00005e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00006d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00006f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00009a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000b045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000c424  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000c624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000c933  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 14 	call	0x2974	; 0x2974 <main>
      8a:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e6 57       	subi	r30, 0x76	; 118
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_enuInit>:
#include "DIO_priv.h"



ES_t DIO_enuInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01

#if DIO_PA0_DIR == DIO_u8INPUT
	DDRA &=~ (1<<0);
#elif DIO_PA0_DIR == DIO_u8OUTPUT
	DDRA |= (1<<0);
     f58:	aa e3       	ldi	r26, 0x3A	; 58
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	81 60       	ori	r24, 0x01	; 1
     f64:	8c 93       	st	X, r24
#endif

	return Local_enuErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_enuSetPinDirection+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_enuSetPinDirection+0x8>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <DIO_enuSetPinDirection+0xa>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03
     f82:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <DIO_enuSetPinDirection+0x20>
     f8e:	d0 c0       	rjmp	.+416    	; 0x1130 <DIO_enuSetPinDirection+0x1c0>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 30       	cpi	r24, 0x08	; 8
     f94:	08 f0       	brcs	.+2      	; 0xf98 <DIO_enuSetPinDirection+0x28>
     f96:	cc c0       	rjmp	.+408    	; 0x1130 <DIO_enuSetPinDirection+0x1c0>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <DIO_enuSetPinDirection+0x30>
     f9e:	c8 c0       	rjmp	.+400    	; 0x1130 <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction<= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3e 83       	std	Y+6, r19	; 0x06
     fa8:	2d 83       	std	Y+5, r18	; 0x05
     faa:	6d 81       	ldd	r22, Y+5	; 0x05
     fac:	7e 81       	ldd	r23, Y+6	; 0x06
     fae:	61 30       	cpi	r22, 0x01	; 1
     fb0:	71 05       	cpc	r23, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_enuSetPinDirection+0x46>
     fb4:	41 c0       	rjmp	.+130    	; 0x1038 <DIO_enuSetPinDirection+0xc8>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_enuSetPinDirection+0x5c>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <DIO_enuSetPinDirection+0x76>
     fca:	b0 c0       	rjmp	.+352    	; 0x112c <DIO_enuSetPinDirection+0x1bc>
     fcc:	6d 81       	ldd	r22, Y+5	; 0x05
     fce:	7e 81       	ldd	r23, Y+6	; 0x06
     fd0:	62 30       	cpi	r22, 0x02	; 2
     fd2:	71 05       	cpc	r23, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_enuSetPinDirection+0x68>
     fd6:	59 c0       	rjmp	.+178    	; 0x108a <DIO_enuSetPinDirection+0x11a>
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_enuSetPinDirection+0x74>
     fe2:	7c c0       	rjmp	.+248    	; 0x10dc <DIO_enuSetPinDirection+0x16c>
     fe4:	a3 c0       	rjmp	.+326    	; 0x112c <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     fe6:	aa e3       	ldi	r26, 0x3A	; 58
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinDirection+0x92>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuSetPinDirection+0x8e>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction<<Copy_u8PinID);
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b9 01       	movw	r22, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuSetPinDirection+0xbc>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	8a 95       	dec	r24
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_enuSetPinDirection+0xb8>
    1030:	cb 01       	movw	r24, r22
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	7a c0       	rjmp	.+244    	; 0x112c <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_enuSetPinDirection+0xe4>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_enuSetPinDirection+0xe0>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction<<Copy_u8PinID);
    105e:	a7 e3       	ldi	r26, 0x37	; 55
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e3       	ldi	r30, 0x37	; 55
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	b9 01       	movw	r22, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_enuSetPinDirection+0x10e>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_enuSetPinDirection+0x10a>
    1082:	cb 01       	movw	r24, r22
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	51 c0       	rjmp	.+162    	; 0x112c <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_enuSetPinDirection+0x136>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_enuSetPinDirection+0x132>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction<<Copy_u8PinID);
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b9 01       	movw	r22, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enuSetPinDirection+0x160>
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enuSetPinDirection+0x15c>
    10d4:	cb 01       	movw	r24, r22
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	28 c0       	rjmp	.+80     	; 0x112c <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    10dc:	a1 e3       	ldi	r26, 0x31	; 49
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e1 e3       	ldi	r30, 0x31	; 49
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuSetPinDirection+0x188>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	2a 95       	dec	r18
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuSetPinDirection+0x184>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction<<Copy_u8PinID);
    1102:	a1 e3       	ldi	r26, 0x31	; 49
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e1 e3       	ldi	r30, 0x31	; 49
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b9 01       	movw	r22, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_enuSetPinDirection+0x1b2>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	8a 95       	dec	r24
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_enuSetPinDirection+0x1ae>
    1126:	cb 01       	movw	r24, r22
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
}
    1136:	26 96       	adiw	r28, 0x06	; 6
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_enuSetPinValue+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_enuSetPinValue+0x8>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_enuSetPinValue+0xa>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
    115a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	08 f0       	brcs	.+2      	; 0x1168 <DIO_enuSetPinValue+0x20>
    1166:	d3 c0       	rjmp	.+422    	; 0x130e <DIO_enuSetPinValue+0x1c6>
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	88 30       	cpi	r24, 0x08	; 8
    116c:	08 f0       	brcs	.+2      	; 0x1170 <DIO_enuSetPinValue+0x28>
    116e:	cf c0       	rjmp	.+414    	; 0x130e <DIO_enuSetPinValue+0x1c6>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	20 f0       	brcs	.+8      	; 0x117e <DIO_enuSetPinValue+0x36>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	08 f0       	brcs	.+2      	; 0x117e <DIO_enuSetPinValue+0x36>
    117c:	c8 c0       	rjmp	.+400    	; 0x130e <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH
					|| Copy_u8Value <= DIO_u8PULL_UP) )

	{
		switch (Copy_u8GroupID)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	6d 81       	ldd	r22, Y+5	; 0x05
    118a:	7e 81       	ldd	r23, Y+6	; 0x06
    118c:	61 30       	cpi	r22, 0x01	; 1
    118e:	71 05       	cpc	r23, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <DIO_enuSetPinValue+0x4c>
    1192:	41 c0       	rjmp	.+130    	; 0x1216 <DIO_enuSetPinValue+0xce>
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	91 05       	cpc	r25, r1
    119c:	34 f4       	brge	.+12     	; 0x11aa <DIO_enuSetPinValue+0x62>
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <DIO_enuSetPinValue+0x7c>
    11a8:	b0 c0       	rjmp	.+352    	; 0x130a <DIO_enuSetPinValue+0x1c2>
    11aa:	6d 81       	ldd	r22, Y+5	; 0x05
    11ac:	7e 81       	ldd	r23, Y+6	; 0x06
    11ae:	62 30       	cpi	r22, 0x02	; 2
    11b0:	71 05       	cpc	r23, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_enuSetPinValue+0x6e>
    11b4:	59 c0       	rjmp	.+178    	; 0x1268 <DIO_enuSetPinValue+0x120>
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_enuSetPinValue+0x7a>
    11c0:	7c c0       	rjmp	.+248    	; 0x12ba <DIO_enuSetPinValue+0x172>
    11c2:	a3 c0       	rjmp	.+326    	; 0x130a <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    11c4:	ab e3       	ldi	r26, 0x3B	; 59
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	eb e3       	ldi	r30, 0x3B	; 59
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_enuSetPinValue+0x98>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_enuSetPinValue+0x94>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value<<Copy_u8PinID);
    11ea:	ab e3       	ldi	r26, 0x3B	; 59
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b9 01       	movw	r22, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_enuSetPinValue+0xc2>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_enuSetPinValue+0xbe>
    120e:	cb 01       	movw	r24, r22
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	7a c0       	rjmp	.+244    	; 0x130a <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1216:	a8 e3       	ldi	r26, 0x38	; 56
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e3       	ldi	r30, 0x38	; 56
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_enuSetPinValue+0xea>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_enuSetPinValue+0xe6>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value<<Copy_u8PinID);
    123c:	a8 e3       	ldi	r26, 0x38	; 56
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e8 e3       	ldi	r30, 0x38	; 56
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b9 01       	movw	r22, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enuSetPinValue+0x114>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enuSetPinValue+0x110>
    1260:	cb 01       	movw	r24, r22
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	51 c0       	rjmp	.+162    	; 0x130a <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enuSetPinValue+0x13c>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	2a 95       	dec	r18
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enuSetPinValue+0x138>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value<<Copy_u8PinID);
    128e:	a5 e3       	ldi	r26, 0x35	; 53
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e3       	ldi	r30, 0x35	; 53
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_enuSetPinValue+0x166>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_enuSetPinValue+0x162>
    12b2:	cb 01       	movw	r24, r22
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	28 c0       	rjmp	.+80     	; 0x130a <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_enuSetPinValue+0x18e>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	2a 95       	dec	r18
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_enuSetPinValue+0x18a>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value<<Copy_u8PinID);
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b9 01       	movw	r22, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enuSetPinValue+0x1b8>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enuSetPinValue+0x1b4>
    1304:	cb 01       	movw	r24, r22
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_enuTogglePinValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_enuTogglePinValue+0x8>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_enuTogglePinValue+0x1e>
    1342:	74 c0       	rjmp	.+232    	; 0x142c <DIO_enuTogglePinValue+0x106>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <DIO_enuTogglePinValue+0x26>
    134a:	70 c0       	rjmp	.+224    	; 0x142c <DIO_enuTogglePinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)

	{
		switch (Copy_u8GroupID)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3d 83       	std	Y+5, r19	; 0x05
    1354:	2c 83       	std	Y+4, r18	; 0x04
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	91 05       	cpc	r25, r1
    135e:	49 f1       	breq	.+82     	; 0x13b2 <DIO_enuTogglePinValue+0x8c>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <DIO_enuTogglePinValue+0x4e>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	61 f0       	breq	.+24     	; 0x138a <DIO_enuTogglePinValue+0x64>
    1372:	5a c0       	rjmp	.+180    	; 0x1428 <DIO_enuTogglePinValue+0x102>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	71 f1       	breq	.+92     	; 0x13da <DIO_enuTogglePinValue+0xb4>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	e9 f1       	breq	.+122    	; 0x1402 <DIO_enuTogglePinValue+0xdc>
    1388:	4f c0       	rjmp	.+158    	; 0x1428 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinID);
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enuTogglePinValue+0x82>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_enuTogglePinValue+0x7e>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	3b c0       	rjmp	.+118    	; 0x1428 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinID);
    13b2:	a8 e3       	ldi	r26, 0x38	; 56
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enuTogglePinValue+0xaa>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enuTogglePinValue+0xa6>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	27 c0       	rjmp	.+78     	; 0x1428 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinID);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enuTogglePinValue+0xd2>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enuTogglePinValue+0xce>
    13fc:	84 27       	eor	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	13 c0       	rjmp	.+38     	; 0x1428 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinID);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enuTogglePinValue+0xfa>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enuTogglePinValue+0xf6>
    1424:	84 27       	eor	r24, r20
    1426:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1428:	19 82       	std	Y+1, r1	; 0x01
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	27 97       	sbiw	r28, 0x07	; 7
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	6b 83       	std	Y+3, r22	; 0x03
    145a:	5d 83       	std	Y+5, r21	; 0x05
    145c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f4       	brne	.+2      	; 0x146c <DIO_enuGetPinValue+0x2a>
    146a:	7d c0       	rjmp	.+250    	; 0x1566 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	08 f0       	brcs	.+2      	; 0x1474 <DIO_enuGetPinValue+0x32>
    1472:	76 c0       	rjmp	.+236    	; 0x1560 <DIO_enuGetPinValue+0x11e>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 30       	cpi	r24, 0x08	; 8
    1478:	08 f0       	brcs	.+2      	; 0x147c <DIO_enuGetPinValue+0x3a>
    147a:	72 c0       	rjmp	.+228    	; 0x1560 <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)

		{
			switch (Copy_u8GroupID)
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3f 83       	std	Y+7, r19	; 0x07
    1484:	2e 83       	std	Y+6, r18	; 0x06
    1486:	4e 81       	ldd	r20, Y+6	; 0x06
    1488:	5f 81       	ldd	r21, Y+7	; 0x07
    148a:	41 30       	cpi	r20, 0x01	; 1
    148c:	51 05       	cpc	r21, r1
    148e:	59 f1       	breq	.+86     	; 0x14e6 <DIO_enuGetPinValue+0xa4>
    1490:	8e 81       	ldd	r24, Y+6	; 0x06
    1492:	9f 81       	ldd	r25, Y+7	; 0x07
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	91 05       	cpc	r25, r1
    1498:	34 f4       	brge	.+12     	; 0x14a6 <DIO_enuGetPinValue+0x64>
    149a:	2e 81       	ldd	r18, Y+6	; 0x06
    149c:	3f 81       	ldd	r19, Y+7	; 0x07
    149e:	21 15       	cp	r18, r1
    14a0:	31 05       	cpc	r19, r1
    14a2:	69 f0       	breq	.+26     	; 0x14be <DIO_enuGetPinValue+0x7c>
    14a4:	5b c0       	rjmp	.+182    	; 0x155c <DIO_enuGetPinValue+0x11a>
    14a6:	4e 81       	ldd	r20, Y+6	; 0x06
    14a8:	5f 81       	ldd	r21, Y+7	; 0x07
    14aa:	42 30       	cpi	r20, 0x02	; 2
    14ac:	51 05       	cpc	r21, r1
    14ae:	79 f1       	breq	.+94     	; 0x150e <DIO_enuGetPinValue+0xcc>
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	9f 81       	ldd	r25, Y+7	; 0x07
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <DIO_enuGetPinValue+0x7a>
    14ba:	3d c0       	rjmp	.+122    	; 0x1536 <DIO_enuGetPinValue+0xf4>
    14bc:	4f c0       	rjmp	.+158    	; 0x155c <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);
    14be:	e9 e3       	ldi	r30, 0x39	; 57
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a9 01       	movw	r20, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_enuGetPinValue+0x94>
    14d2:	55 95       	asr	r21
    14d4:	47 95       	ror	r20
    14d6:	8a 95       	dec	r24
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_enuGetPinValue+0x90>
    14da:	ca 01       	movw	r24, r20
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	ec 81       	ldd	r30, Y+4	; 0x04
    14e0:	fd 81       	ldd	r31, Y+5	; 0x05
    14e2:	80 83       	st	Z, r24
    14e4:	3b c0       	rjmp	.+118    	; 0x155c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);
    14e6:	e6 e3       	ldi	r30, 0x36	; 54
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_enuGetPinValue+0xbc>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_enuGetPinValue+0xb8>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	ec 81       	ldd	r30, Y+4	; 0x04
    1508:	fd 81       	ldd	r31, Y+5	; 0x05
    150a:	80 83       	st	Z, r24
    150c:	27 c0       	rjmp	.+78     	; 0x155c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);
    150e:	e3 e3       	ldi	r30, 0x33	; 51
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_enuGetPinValue+0xe4>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_enuGetPinValue+0xe0>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	ec 81       	ldd	r30, Y+4	; 0x04
    1530:	fd 81       	ldd	r31, Y+5	; 0x05
    1532:	80 83       	st	Z, r24
    1534:	13 c0       	rjmp	.+38     	; 0x155c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);
    1536:	e0 e3       	ldi	r30, 0x30	; 48
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_enuGetPinValue+0x10c>
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_enuGetPinValue+0x108>
    1552:	ca 01       	movw	r24, r20
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	ec 81       	ldd	r30, Y+4	; 0x04
    1558:	fd 81       	ldd	r31, Y+5	; 0x05
    155a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	05 c0       	rjmp	.+10     	; 0x156a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	27 96       	adiw	r28, 0x07	; 7
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <LCD_enuInit>:

#include <util/delay.h>


ES_t LCD_enuInit(void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	e9 97       	sbiw	r28, 0x39	; 57
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_u8ErrorState = ES_NOK;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	66 e0       	ldi	r22, 0x06	; 6
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	64 e0       	ldi	r22, 0x04	; 4
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	63 e0       	ldi	r22, 0x03	; 3
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	ac e0       	ldi	r26, 0x0C	; 12
    15e2:	b2 e4       	ldi	r27, 0x42	; 66
    15e4:	8d ab       	std	Y+53, r24	; 0x35
    15e6:	9e ab       	std	Y+54, r25	; 0x36
    15e8:	af ab       	std	Y+55, r26	; 0x37
    15ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	6d a9       	ldd	r22, Y+53	; 0x35
    15ee:	7e a9       	ldd	r23, Y+54	; 0x36
    15f0:	8f a9       	ldd	r24, Y+55	; 0x37
    15f2:	98 ad       	ldd	r25, Y+56	; 0x38
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a e7       	ldi	r20, 0x7A	; 122
    15fa:	55 e4       	ldi	r21, 0x45	; 69
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	89 ab       	std	Y+49, r24	; 0x31
    1606:	9a ab       	std	Y+50, r25	; 0x32
    1608:	ab ab       	std	Y+51, r26	; 0x33
    160a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f e3       	ldi	r21, 0x3F	; 63
    161c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1620:	88 23       	and	r24, r24
    1622:	2c f4       	brge	.+10     	; 0x162e <LCD_enuInit+0xb0>
		__ticks = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	98 ab       	std	Y+48, r25	; 0x30
    162a:	8f a7       	std	Y+47, r24	; 0x2f
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    162e:	69 a9       	ldd	r22, Y+49	; 0x31
    1630:	7a a9       	ldd	r23, Y+50	; 0x32
    1632:	8b a9       	ldd	r24, Y+51	; 0x33
    1634:	9c a9       	ldd	r25, Y+52	; 0x34
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	3f ef       	ldi	r19, 0xFF	; 255
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	57 e4       	ldi	r21, 0x47	; 71
    163e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1642:	18 16       	cp	r1, r24
    1644:	4c f5       	brge	.+82     	; 0x1698 <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	6d a9       	ldd	r22, Y+53	; 0x35
    1648:	7e a9       	ldd	r23, Y+54	; 0x36
    164a:	8f a9       	ldd	r24, Y+55	; 0x37
    164c:	98 ad       	ldd	r25, Y+56	; 0x38
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	98 ab       	std	Y+48, r25	; 0x30
    166c:	8f a7       	std	Y+47, r24	; 0x2f
    166e:	0f c0       	rjmp	.+30     	; 0x168e <LCD_enuInit+0x110>
    1670:	80 e9       	ldi	r24, 0x90	; 144
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	9e a7       	std	Y+46, r25	; 0x2e
    1676:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1678:	8d a5       	ldd	r24, Y+45	; 0x2d
    167a:	9e a5       	ldd	r25, Y+46	; 0x2e
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_enuInit+0xfe>
    1680:	9e a7       	std	Y+46, r25	; 0x2e
    1682:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1684:	8f a5       	ldd	r24, Y+47	; 0x2f
    1686:	98 a9       	ldd	r25, Y+48	; 0x30
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	98 ab       	std	Y+48, r25	; 0x30
    168c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1690:	98 a9       	ldd	r25, Y+48	; 0x30
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	69 f7       	brne	.-38     	; 0x1670 <LCD_enuInit+0xf2>
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1698:	69 a9       	ldd	r22, Y+49	; 0x31
    169a:	7a a9       	ldd	r23, Y+50	; 0x32
    169c:	8b a9       	ldd	r24, Y+51	; 0x33
    169e:	9c a9       	ldd	r25, Y+52	; 0x34
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	98 ab       	std	Y+48, r25	; 0x30
    16aa:	8f a7       	std	Y+47, r24	; 0x2f
    16ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ae:	98 a9       	ldd	r25, Y+48	; 0x30
    16b0:	9c a7       	std	Y+44, r25	; 0x2c
    16b2:	8b a7       	std	Y+43, r24	; 0x2b
    16b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_enuInit+0x13a>
    16bc:	9c a7       	std	Y+44, r25	; 0x2c
    16be:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
#if LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x28);
    16ca:	88 e2       	ldi	r24, 0x28	; 40
    16cc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e8       	ldi	r26, 0x80	; 128
    16d6:	bf e3       	ldi	r27, 0x3F	; 63
    16d8:	8f a3       	std	Y+39, r24	; 0x27
    16da:	98 a7       	std	Y+40, r25	; 0x28
    16dc:	a9 a7       	std	Y+41, r26	; 0x29
    16de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6f a1       	ldd	r22, Y+39	; 0x27
    16e2:	78 a5       	ldd	r23, Y+40	; 0x28
    16e4:	89 a5       	ldd	r24, Y+41	; 0x29
    16e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	55 e4       	ldi	r21, 0x45	; 69
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8b a3       	std	Y+35, r24	; 0x23
    16fa:	9c a3       	std	Y+36, r25	; 0x24
    16fc:	ad a3       	std	Y+37, r26	; 0x25
    16fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1700:	6b a1       	ldd	r22, Y+35	; 0x23
    1702:	7c a1       	ldd	r23, Y+36	; 0x24
    1704:	8d a1       	ldd	r24, Y+37	; 0x25
    1706:	9e a1       	ldd	r25, Y+38	; 0x26
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <LCD_enuInit+0x1a4>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9a a3       	std	Y+34, r25	; 0x22
    171e:	89 a3       	std	Y+33, r24	; 0x21
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    1722:	6b a1       	ldd	r22, Y+35	; 0x23
    1724:	7c a1       	ldd	r23, Y+36	; 0x24
    1726:	8d a1       	ldd	r24, Y+37	; 0x25
    1728:	9e a1       	ldd	r25, Y+38	; 0x26
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6f a1       	ldd	r22, Y+39	; 0x27
    173c:	78 a5       	ldd	r23, Y+40	; 0x28
    173e:	89 a5       	ldd	r24, Y+41	; 0x29
    1740:	9a a5       	ldd	r25, Y+42	; 0x2a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <LCD_enuInit+0x204>
    1764:	80 e9       	ldi	r24, 0x90	; 144
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	98 a3       	std	Y+32, r25	; 0x20
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
    176c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    176e:	98 a1       	ldd	r25, Y+32	; 0x20
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_enuInit+0x1f2>
    1774:	98 a3       	std	Y+32, r25	; 0x20
    1776:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	89 a1       	ldd	r24, Y+33	; 0x21
    177a:	9a a1       	ldd	r25, Y+34	; 0x22
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <LCD_enuInit+0x1e6>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6b a1       	ldd	r22, Y+35	; 0x23
    178e:	7c a1       	ldd	r23, Y+36	; 0x24
    1790:	8d a1       	ldd	r24, Y+37	; 0x25
    1792:	9e a1       	ldd	r25, Y+38	; 0x26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
    17a0:	89 a1       	ldd	r24, Y+33	; 0x21
    17a2:	9a a1       	ldd	r25, Y+34	; 0x22
    17a4:	9e 8f       	std	Y+30, r25	; 0x1e
    17a6:	8d 8f       	std	Y+29, r24	; 0x1d
    17a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_enuInit+0x22e>
    17b0:	9e 8f       	std	Y+30, r25	; 0x1e
    17b2:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_enuWriteNLatch(0x38);

#endif

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0f);
    17be:	8f e0       	ldi	r24, 0x0F	; 15
    17c0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e8       	ldi	r26, 0x80	; 128
    17ca:	bf e3       	ldi	r27, 0x3F	; 63
    17cc:	89 8f       	std	Y+25, r24	; 0x19
    17ce:	9a 8f       	std	Y+26, r25	; 0x1a
    17d0:	ab 8f       	std	Y+27, r26	; 0x1b
    17d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	69 8d       	ldd	r22, Y+25	; 0x19
    17d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a e7       	ldi	r20, 0x7A	; 122
    17e2:	55 e4       	ldi	r21, 0x45	; 69
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8d 8b       	std	Y+21, r24	; 0x15
    17ee:	9e 8b       	std	Y+22, r25	; 0x16
    17f0:	af 8b       	std	Y+23, r26	; 0x17
    17f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f4:	6d 89       	ldd	r22, Y+21	; 0x15
    17f6:	7e 89       	ldd	r23, Y+22	; 0x16
    17f8:	8f 89       	ldd	r24, Y+23	; 0x17
    17fa:	98 8d       	ldd	r25, Y+24	; 0x18
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <LCD_enuInit+0x298>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <LCD_enuInit+0x316>
	else if (__tmp > 65535)
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <LCD_enuInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	69 8d       	ldd	r22, Y+25	; 0x19
    1830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9c 8b       	std	Y+20, r25	; 0x14
    1854:	8b 8b       	std	Y+19, r24	; 0x13
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <LCD_enuInit+0x2f8>
    1858:	80 e9       	ldi	r24, 0x90	; 144
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	9a 8b       	std	Y+18, r25	; 0x12
    185e:	89 8b       	std	Y+17, r24	; 0x11
    1860:	89 89       	ldd	r24, Y+17	; 0x11
    1862:	9a 89       	ldd	r25, Y+18	; 0x12
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_enuInit+0x2e6>
    1868:	9a 8b       	std	Y+18, r25	; 0x12
    186a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8b 89       	ldd	r24, Y+19	; 0x13
    186e:	9c 89       	ldd	r25, Y+20	; 0x14
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9c 8b       	std	Y+20, r25	; 0x14
    1874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8b 89       	ldd	r24, Y+19	; 0x13
    1878:	9c 89       	ldd	r25, Y+20	; 0x14
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <LCD_enuInit+0x2da>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <LCD_enuInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6d 89       	ldd	r22, Y+21	; 0x15
    1882:	7e 89       	ldd	r23, Y+22	; 0x16
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	8b 89       	ldd	r24, Y+19	; 0x13
    1896:	9c 89       	ldd	r25, Y+20	; 0x14
    1898:	98 8b       	std	Y+16, r25	; 0x10
    189a:	8f 87       	std	Y+15, r24	; 0x0f
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	98 89       	ldd	r25, Y+16	; 0x10
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_enuInit+0x322>
    18a4:	98 8b       	std	Y+16, r25	; 0x10
    18a6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e4       	ldi	r27, 0x40	; 64
    18c0:	8b 87       	std	Y+11, r24	; 0x0b
    18c2:	9c 87       	std	Y+12, r25	; 0x0c
    18c4:	ad 87       	std	Y+13, r26	; 0x0d
    18c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a e7       	ldi	r20, 0x7A	; 122
    18d6:	55 e4       	ldi	r21, 0x45	; 69
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	98 87       	std	Y+8, r25	; 0x08
    18e4:	a9 87       	std	Y+9, r26	; 0x09
    18e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_enuInit+0x38c>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_enuInit+0x40a>
	else if (__tmp > 65535)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_enuInit+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_enuInit+0x3ec>
    194c:	80 e9       	ldi	r24, 0x90	; 144
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_enuInit+0x3da>
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_enuInit+0x3ce>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_enuInit+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_enuInit+0x416>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    19a6:	86 e0       	ldi	r24, 0x06	; 6
    19a8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    19ac:	89 ad       	ldd	r24, Y+57	; 0x39
}
    19ae:	e9 96       	adiw	r28, 0x39	; 57
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <LCD_enuSendData+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>


	return Local_u8ErrorState;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <LCD_enuSendCommand+0x6>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>

	return Local_u8ErrorState;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LCD_enuSendString>:


ES_t LCD_enuSendString(const char * Copy_pcString)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <LCD_enuSendString+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	10 c0       	rjmp	.+32     	; 0x1a4e <LCD_enuSendString+0x36>

	while (*Copy_pcString)//'\0' ,'0'
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(*Copy_pcString++);
    1a38:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3c:	20 81       	ld	r18, Z
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	9b 83       	std	Y+3, r25	; 0x03
    1a46:	8a 83       	std	Y+2, r24	; 0x02
    1a48:	82 2f       	mov	r24, r18
    1a4a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>

ES_t LCD_enuSendString(const char * Copy_pcString)
{
	ES_t Local_u8ErrorState = ES_NOK;

	while (*Copy_pcString)//'\0' ,'0'
    1a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a50:	fb 81       	ldd	r31, Y+3	; 0x03
    1a52:	80 81       	ld	r24, Z
    1a54:	88 23       	and	r24, r24
    1a56:	59 f7       	brne	.-42     	; 0x1a2e <LCD_enuSendString+0x16>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch(*Copy_pcString++);
	}

	return Local_u8ErrorState;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <LCD_enuSendNum>:


ES_t LCD_enuSendNum(f64 Copy_f64Num)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	62 97       	sbiw	r28, 0x12	; 18
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	6f 87       	std	Y+15, r22	; 0x0f
    1a7c:	78 8b       	std	Y+16, r23	; 0x10
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
    1a80:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_u8ErrorState = ES_NOK;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	8e 87       	std	Y+14, r24	; 0x0e

	u32 Local_u32IntergerPart = 0;
    1a86:	1a 86       	std	Y+10, r1	; 0x0a
    1a88:	1b 86       	std	Y+11, r1	; 0x0b
    1a8a:	1c 86       	std	Y+12, r1	; 0x0c
    1a8c:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32DecimalPart = 0;
    1a8e:	1e 82       	std	Y+6, r1	; 0x06
    1a90:	1f 82       	std	Y+7, r1	; 0x07
    1a92:	18 86       	std	Y+8, r1	; 0x08
    1a94:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32ReversedTempNum = 0;
    1a96:	1a 82       	std	Y+2, r1	; 0x02
    1a98:	1b 82       	std	Y+3, r1	; 0x03
    1a9a:	1c 82       	std	Y+4, r1	; 0x04
    1a9c:	1d 82       	std	Y+5, r1	; 0x05
	u8  Local_u8DigitsCount = 0;
    1a9e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_f64Num < 0)
    1aa0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aa2:	78 89       	ldd	r23, Y+16	; 0x10
    1aa4:	89 89       	ldd	r24, Y+17	; 0x11
    1aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	8c f4       	brge	.+34     	; 0x1ada <LCD_enuSendNum+0x74>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('-');
    1ac2:	8d e2       	ldi	r24, 0x2D	; 45
    1ac4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
		Copy_f64Num = -1 * Copy_f64Num;
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	98 89       	ldd	r25, Y+16	; 0x10
    1acc:	a9 89       	ldd	r26, Y+17	; 0x11
    1ace:	ba 89       	ldd	r27, Y+18	; 0x12
    1ad0:	b0 58       	subi	r27, 0x80	; 128
    1ad2:	8f 87       	std	Y+15, r24	; 0x0f
    1ad4:	98 8b       	std	Y+16, r25	; 0x10
    1ad6:	a9 8b       	std	Y+17, r26	; 0x11
    1ad8:	ba 8b       	std	Y+18, r27	; 0x12
	}
	else { /* Do Nothing */}

	if(Copy_f64Num == 0.0)
    1ada:	6f 85       	ldd	r22, Y+15	; 0x0f
    1adc:	78 89       	ldd	r23, Y+16	; 0x10
    1ade:	89 89       	ldd	r24, Y+17	; 0x11
    1ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	49 f4       	brne	.+18     	; 0x1b04 <LCD_enuSendNum+0x9e>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('0');
    1afc:	80 e3       	ldi	r24, 0x30	; 48
    1afe:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
    1b02:	5a c1       	rjmp	.+692    	; 0x1db8 <LCD_enuSendNum+0x352>
	}
	else
	{
		Local_u32IntergerPart = (u32)Copy_f64Num;
    1b04:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b06:	78 89       	ldd	r23, Y+16	; 0x10
    1b08:	89 89       	ldd	r24, Y+17	; 0x11
    1b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8a 87       	std	Y+10, r24	; 0x0a
    1b16:	9b 87       	std	Y+11, r25	; 0x0b
    1b18:	ac 87       	std	Y+12, r26	; 0x0c
    1b1a:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32DecimalPart = (u32)(((f64)Copy_f64Num - (f64)Local_u32IntergerPart) * 10000.0);
    1b1c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b1e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b24:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b2e:	78 89       	ldd	r23, Y+16	; 0x10
    1b30:	89 89       	ldd	r24, Y+17	; 0x11
    1b32:	9a 89       	ldd	r25, Y+18	; 0x12
    1b34:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e4       	ldi	r19, 0x40	; 64
    1b44:	4c e1       	ldi	r20, 0x1C	; 28
    1b46:	56 e4       	ldi	r21, 0x46	; 70
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
    1b5e:	9f 83       	std	Y+7, r25	; 0x07
    1b60:	a8 87       	std	Y+8, r26	; 0x08
    1b62:	b9 87       	std	Y+9, r27	; 0x09

		if (Local_u32IntergerPart == 0)
    1b64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b68:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b6a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	a1 05       	cpc	r26, r1
    1b70:	b1 05       	cpc	r27, r1
    1b72:	49 f4       	brne	.+18     	; 0x1b86 <LCD_enuSendNum+0x120>
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch('0');
    1b7e:	80 e3       	ldi	r24, 0x30	; 48
    1b80:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
    1b84:	80 c0       	rjmp	.+256    	; 0x1c86 <LCD_enuSendNum+0x220>
		}
		else
		{
			Local_u32ReversedTempNum = 0;
    1b86:	1a 82       	std	Y+2, r1	; 0x02
    1b88:	1b 82       	std	Y+3, r1	; 0x03
    1b8a:	1c 82       	std	Y+4, r1	; 0x04
    1b8c:	1d 82       	std	Y+5, r1	; 0x05
    1b8e:	43 c0       	rjmp	.+134    	; 0x1c16 <LCD_enuSendNum+0x1b0>
			while (Local_u32IntergerPart != 0)
			{
				Local_u32ReversedTempNum *= 10;
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	9b 81       	ldd	r25, Y+3	; 0x03
    1b94:	ac 81       	ldd	r26, Y+4	; 0x04
    1b96:	bd 81       	ldd	r27, Y+5	; 0x05
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsi3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8a 83       	std	Y+2, r24	; 0x02
    1bae:	9b 83       	std	Y+3, r25	; 0x03
    1bb0:	ac 83       	std	Y+4, r26	; 0x04
    1bb2:	bd 83       	std	Y+5, r27	; 0x05
				Local_u32ReversedTempNum += (Local_u32IntergerPart % 10);
    1bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1bba:	bd 85       	ldd	r27, Y+13	; 0x0d
    1bbc:	2a e0       	ldi	r18, 0x0A	; 10
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	ad 01       	movw	r20, r26
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	ac 81       	ldd	r26, Y+4	; 0x04
    1bda:	bd 81       	ldd	r27, Y+5	; 0x05
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	a4 1f       	adc	r26, r20
    1be2:	b5 1f       	adc	r27, r21
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	ac 83       	std	Y+4, r26	; 0x04
    1bea:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8DigitsCount++;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	89 83       	std	Y+1, r24	; 0x01
				Local_u32IntergerPart /= 10;
    1bf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf6:	ac 85       	ldd	r26, Y+12	; 0x0c
    1bf8:	bd 85       	ldd	r27, Y+13	; 0x0d
    1bfa:	2a e0       	ldi	r18, 0x0A	; 10
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1c0a:	da 01       	movw	r26, r20
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	8a 87       	std	Y+10, r24	; 0x0a
    1c10:	9b 87       	std	Y+11, r25	; 0x0b
    1c12:	ac 87       	std	Y+12, r26	; 0x0c
    1c14:	bd 87       	std	Y+13, r27	; 0x0d
			LCD_enuWriteNLatch('0');
		}
		else
		{
			Local_u32ReversedTempNum = 0;
			while (Local_u32IntergerPart != 0)
    1c16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c1c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	a1 05       	cpc	r26, r1
    1c22:	b1 05       	cpc	r27, r1
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <LCD_enuSendNum+0x1c2>
    1c26:	b4 cf       	rjmp	.-152    	; 0x1b90 <LCD_enuSendNum+0x12a>
    1c28:	2b c0       	rjmp	.+86     	; 0x1c80 <LCD_enuSendNum+0x21a>
				Local_u8DigitsCount++;
				Local_u32IntergerPart /= 10;
			}
			while (Local_u8DigitsCount != 0)
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
				LCD_enuWriteNLatch((Local_u32ReversedTempNum % 10) + '0');
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	ac 81       	ldd	r26, Y+4	; 0x04
    1c3a:	bd 81       	ldd	r27, Y+5	; 0x05
    1c3c:	2a e0       	ldi	r18, 0x0A	; 10
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	80 5d       	subi	r24, 0xD0	; 208
    1c52:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
				Local_u8DigitsCount--;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	81 50       	subi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
				Local_u32ReversedTempNum /= 10;
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	ac 81       	ldd	r26, Y+4	; 0x04
    1c62:	bd 81       	ldd	r27, Y+5	; 0x05
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1c74:	da 01       	movw	r26, r20
    1c76:	c9 01       	movw	r24, r18
    1c78:	8a 83       	std	Y+2, r24	; 0x02
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	ac 83       	std	Y+4, r26	; 0x04
    1c7e:	bd 83       	std	Y+5, r27	; 0x05
				Local_u32ReversedTempNum *= 10;
				Local_u32ReversedTempNum += (Local_u32IntergerPart % 10);
				Local_u8DigitsCount++;
				Local_u32IntergerPart /= 10;
			}
			while (Local_u8DigitsCount != 0)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	88 23       	and	r24, r24
    1c84:	91 f6       	brne	.-92     	; 0x1c2a <LCD_enuSendNum+0x1c4>
			// 	LCD_enuWriteNLatch('0');
			// 	Local_u8DigitsCount--;
			// }
		}

		if(Local_u32DecimalPart > 0)
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	a8 85       	ldd	r26, Y+8	; 0x08
    1c8c:	b9 85       	ldd	r27, Y+9	; 0x09
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	a1 05       	cpc	r26, r1
    1c92:	b1 05       	cpc	r27, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <LCD_enuSendNum+0x232>
    1c96:	90 c0       	rjmp	.+288    	; 0x1db8 <LCD_enuSendNum+0x352>
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch('.');
    1ca2:	8e e2       	ldi	r24, 0x2E	; 46
    1ca4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>

			Local_u32ReversedTempNum = 0;
    1ca8:	1a 82       	std	Y+2, r1	; 0x02
    1caa:	1b 82       	std	Y+3, r1	; 0x03
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	1d 82       	std	Y+5, r1	; 0x05
    1cb0:	43 c0       	rjmp	.+134    	; 0x1d38 <LCD_enuSendNum+0x2d2>
			while (Local_u32DecimalPart != 0)
			{
				Local_u32ReversedTempNum *= 10;
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	ac 81       	ldd	r26, Y+4	; 0x04
    1cb8:	bd 81       	ldd	r27, Y+5	; 0x05
    1cba:	2a e0       	ldi	r18, 0x0A	; 10
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsi3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	9b 83       	std	Y+3, r25	; 0x03
    1cd2:	ac 83       	std	Y+4, r26	; 0x04
    1cd4:	bd 83       	std	Y+5, r27	; 0x05
				Local_u32ReversedTempNum += Local_u32DecimalPart % 10;
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cda:	a8 85       	ldd	r26, Y+8	; 0x08
    1cdc:	b9 85       	ldd	r27, Y+9	; 0x09
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 01       	movw	r18, r24
    1cf4:	ad 01       	movw	r20, r26
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	ac 81       	ldd	r26, Y+4	; 0x04
    1cfc:	bd 81       	ldd	r27, Y+5	; 0x05
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	a4 1f       	adc	r26, r20
    1d04:	b5 1f       	adc	r27, r21
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	9b 83       	std	Y+3, r25	; 0x03
    1d0a:	ac 83       	std	Y+4, r26	; 0x04
    1d0c:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8DigitsCount++;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	89 83       	std	Y+1, r24	; 0x01
				Local_u32DecimalPart /= 10;
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	a8 85       	ldd	r26, Y+8	; 0x08
    1d1a:	b9 85       	ldd	r27, Y+9	; 0x09
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1d2c:	da 01       	movw	r26, r20
    1d2e:	c9 01       	movw	r24, r18
    1d30:	8e 83       	std	Y+6, r24	; 0x06
    1d32:	9f 83       	std	Y+7, r25	; 0x07
    1d34:	a8 87       	std	Y+8, r26	; 0x08
    1d36:	b9 87       	std	Y+9, r27	; 0x09
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			LCD_enuWriteNLatch('.');

			Local_u32ReversedTempNum = 0;
			while (Local_u32DecimalPart != 0)
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	a8 85       	ldd	r26, Y+8	; 0x08
    1d3e:	b9 85       	ldd	r27, Y+9	; 0x09
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <LCD_enuSendNum+0x2e4>
    1d48:	b4 cf       	rjmp	.-152    	; 0x1cb2 <LCD_enuSendNum+0x24c>
    1d4a:	2b c0       	rjmp	.+86     	; 0x1da2 <LCD_enuSendNum+0x33c>
				Local_u8DigitsCount++;
				Local_u32DecimalPart /= 10;
			}
			while ((Local_u8DigitsCount != 0) && (Local_u32ReversedTempNum != 0))
			{
					DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
					LCD_enuWriteNLatch((Local_u32ReversedTempNum % 10) + '0');
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	ac 81       	ldd	r26, Y+4	; 0x04
    1d5c:	bd 81       	ldd	r27, Y+5	; 0x05
    1d5e:	2a e0       	ldi	r18, 0x0A	; 10
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	80 5d       	subi	r24, 0xD0	; 208
    1d74:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_enuWriteNLatch>
					Local_u8DigitsCount--;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
					Local_u32ReversedTempNum /= 10;
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	ac 81       	ldd	r26, Y+4	; 0x04
    1d84:	bd 81       	ldd	r27, Y+5	; 0x05
    1d86:	2a e0       	ldi	r18, 0x0A	; 10
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__udivmodsi4>
    1d96:	da 01       	movw	r26, r20
    1d98:	c9 01       	movw	r24, r18
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	ac 83       	std	Y+4, r26	; 0x04
    1da0:	bd 83       	std	Y+5, r27	; 0x05
				Local_u32ReversedTempNum *= 10;
				Local_u32ReversedTempNum += Local_u32DecimalPart % 10;
				Local_u8DigitsCount++;
				Local_u32DecimalPart /= 10;
			}
			while ((Local_u8DigitsCount != 0) && (Local_u32ReversedTempNum != 0))
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	88 23       	and	r24, r24
    1da6:	41 f0       	breq	.+16     	; 0x1db8 <LCD_enuSendNum+0x352>
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	ac 81       	ldd	r26, Y+4	; 0x04
    1dae:	bd 81       	ldd	r27, Y+5	; 0x05
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	a1 05       	cpc	r26, r1
    1db4:	b1 05       	cpc	r27, r1
    1db6:	51 f6       	brne	.-108    	; 0x1d4c <LCD_enuSendNum+0x2e6>
			// }
		}
		else { /* Do Nothing */ }
	}

	return Local_u8ErrorState;
    1db8:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1dba:	62 96       	adiw	r28, 0x12	; 18
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_enuWriteNLatch>:


static ES_t LCD_enuWriteNLatch(u8 Copy_u8Data)
{
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	c6 55       	subi	r28, 0x56	; 86
    1dda:	d0 40       	sbci	r29, 0x00	; 0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	fe 01       	movw	r30, r28
    1de8:	ea 5a       	subi	r30, 0xAA	; 170
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 83       	st	Z, r24
	ES_t Local_u8ErrorState = ES_NOK;
    1dee:	fe 01       	movw	r30, r28
    1df0:	eb 5a       	subi	r30, 0xAB	; 171
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 83       	st	Z, r24

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

	if (Copy_u8Data == 0x28)//'('
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ea 5a       	subi	r30, 0xAA	; 170
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	88 32       	cpi	r24, 0x28	; 40
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <LCD_enuWriteNLatch+0x4e>
    1e18:	79 c1       	rjmp	.+754    	; 0x210c <LCD_enuWriteNLatch+0x340>
		//u8 Local_u8RS_Val;
		//DIO_enuGetPinValue(RS_PORT, RS_PIN, &Local_u8RS_Val);

		//if (Local_u8RS_Val == DIO_u8LOW)
		{
			DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ea 5a       	subi	r30, 0xAA	; 170
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	98 2f       	mov	r25, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	99 27       	eor	r25, r25
    1e28:	99 1f       	adc	r25, r25
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	66 e0       	ldi	r22, 0x06	; 6
    1e2e:	49 2f       	mov	r20, r25
    1e30:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    1e34:	fe 01       	movw	r30, r28
    1e36:	ea 5a       	subi	r30, 0xAA	; 170
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	82 95       	swap	r24
    1e3e:	86 95       	lsr	r24
    1e40:	86 95       	lsr	r24
    1e42:	83 70       	andi	r24, 0x03	; 3
    1e44:	98 2f       	mov	r25, r24
    1e46:	91 70       	andi	r25, 0x01	; 1
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	65 e0       	ldi	r22, 0x05	; 5
    1e4c:	49 2f       	mov	r20, r25
    1e4e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    1e52:	fe 01       	movw	r30, r28
    1e54:	ea 5a       	subi	r30, 0xAA	; 170
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 95       	swap	r24
    1e5c:	86 95       	lsr	r24
    1e5e:	87 70       	andi	r24, 0x07	; 7
    1e60:	98 2f       	mov	r25, r24
    1e62:	91 70       	andi	r25, 0x01	; 1
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	64 e0       	ldi	r22, 0x04	; 4
    1e68:	49 2f       	mov	r20, r25
    1e6a:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ea 5a       	subi	r30, 0xAA	; 170
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	82 95       	swap	r24
    1e78:	8f 70       	andi	r24, 0x0F	; 15
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	91 70       	andi	r25, 0x01	; 1
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	49 2f       	mov	r20, r25
    1e84:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

			DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    1e92:	fe 01       	movw	r30, r28
    1e94:	ef 5a       	subi	r30, 0xAF	; 175
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	03 5b       	subi	r16, 0xB3	; 179
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 5a       	subi	r30, 0xAF	; 175
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a e7       	ldi	r20, 0x7A	; 122
    1ec2:	55 e4       	ldi	r21, 0x45	; 69
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 83       	st	Z, r24
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	a2 83       	std	Z+2, r26	; 0x02
    1ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e3 5b       	subi	r30, 0xB3	; 179
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	44 f4       	brge	.+16     	; 0x1f04 <LCD_enuWriteNLatch+0x138>
		__ticks = 1;
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e5 5b       	subi	r30, 0xB5	; 181
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	64 c0       	rjmp	.+200    	; 0x1fcc <LCD_enuWriteNLatch+0x200>
	else if (__tmp > 65535)
    1f04:	fe 01       	movw	r30, r28
    1f06:	e3 5b       	subi	r30, 0xB3	; 179
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <LCD_enuWriteNLatch+0x158>
    1f22:	43 c0       	rjmp	.+134    	; 0x1faa <LCD_enuWriteNLatch+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	fe 01       	movw	r30, r28
    1f26:	ef 5a       	subi	r30, 0xAF	; 175
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8e 01       	movw	r16, r28
    1f44:	05 5b       	subi	r16, 0xB5	; 181
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	1f c0       	rjmp	.+62     	; 0x1f9a <LCD_enuWriteNLatch+0x1ce>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e7 5b       	subi	r30, 0xB7	; 183
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 e9       	ldi	r24, 0x90	; 144
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e7 5b       	subi	r30, 0xB7	; 183
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_enuWriteNLatch+0x1a8>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 5b       	subi	r30, 0xB7	; 183
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	de 01       	movw	r26, r28
    1f84:	a5 5b       	subi	r26, 0xB5	; 181
    1f86:	bf 4f       	sbci	r27, 0xFF	; 255
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e5 5b       	subi	r30, 0xB5	; 181
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e5 5b       	subi	r30, 0xB5	; 181
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	d1 f6       	brne	.-76     	; 0x1f5c <LCD_enuWriteNLatch+0x190>
    1fa8:	27 c0       	rjmp	.+78     	; 0x1ff8 <LCD_enuWriteNLatch+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	8e 01       	movw	r16, r28
    1fac:	05 5b       	subi	r16, 0xB5	; 181
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e3 5b       	subi	r30, 0xB3	; 179
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	de 01       	movw	r26, r28
    1fce:	a9 5b       	subi	r26, 0xB9	; 185
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e5 5b       	subi	r30, 0xB5	; 181
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	8d 93       	st	X+, r24
    1fde:	9c 93       	st	X, r25
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 5b       	subi	r30, 0xB9	; 185
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_enuWriteNLatch+0x21e>
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e9 5b       	subi	r30, 0xB9	; 185
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    2002:	fe 01       	movw	r30, r28
    2004:	ed 5b       	subi	r30, 0xBD	; 189
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 ea       	ldi	r26, 0xA0	; 160
    200e:	b0 e4       	ldi	r27, 0x40	; 64
    2010:	80 83       	st	Z, r24
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	a2 83       	std	Z+2, r26	; 0x02
    2016:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	8e 01       	movw	r16, r28
    201a:	01 5c       	subi	r16, 0xC1	; 193
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	ed 5b       	subi	r30, 0xBD	; 189
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a e7       	ldi	r20, 0x7A	; 122
    2032:	55 e4       	ldi	r21, 0x45	; 69
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	f8 01       	movw	r30, r16
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2046:	fe 01       	movw	r30, r28
    2048:	ff 96       	adiw	r30, 0x3f	; 63
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	2c f4       	brge	.+10     	; 0x206c <LCD_enuWriteNLatch+0x2a0>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e af       	std	Y+62, r25	; 0x3e
    2068:	8d af       	std	Y+61, r24	; 0x3d
    206a:	46 c0       	rjmp	.+140    	; 0x20f8 <LCD_enuWriteNLatch+0x32c>
	else if (__tmp > 65535)
    206c:	fe 01       	movw	r30, r28
    206e:	ff 96       	adiw	r30, 0x3f	; 63
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	64 f5       	brge	.+88     	; 0x20e0 <LCD_enuWriteNLatch+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2088:	fe 01       	movw	r30, r28
    208a:	ed 5b       	subi	r30, 0xBD	; 189
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e af       	std	Y+62, r25	; 0x3e
    20b4:	8d af       	std	Y+61, r24	; 0x3d
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_enuWriteNLatch+0x30a>
    20b8:	80 e9       	ldi	r24, 0x90	; 144
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	9c af       	std	Y+60, r25	; 0x3c
    20be:	8b af       	std	Y+59, r24	; 0x3b
    20c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    20c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_enuWriteNLatch+0x2f8>
    20c8:	9c af       	std	Y+60, r25	; 0x3c
    20ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e af       	std	Y+62, r25	; 0x3e
    20d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_enuWriteNLatch+0x2ec>
    20de:	16 c0       	rjmp	.+44     	; 0x210c <LCD_enuWriteNLatch+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	fe 01       	movw	r30, r28
    20e2:	ff 96       	adiw	r30, 0x3f	; 63
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e af       	std	Y+62, r25	; 0x3e
    20f6:	8d af       	std	Y+61, r24	; 0x3d
    20f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fc:	9a af       	std	Y+58, r25	; 0x3a
    20fe:	89 af       	std	Y+57, r24	; 0x39
    2100:	89 ad       	ldd	r24, Y+57	; 0x39
    2102:	9a ad       	ldd	r25, Y+58	; 0x3a
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_enuWriteNLatch+0x338>
    2108:	9a af       	std	Y+58, r25	; 0x3a
    210a:	89 af       	std	Y+57, r24	; 0x39
		}
	}

#if LCD_MODE == FOUR_BIT //'A' =65=0b 0100  0001

	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>7)&1));
    210c:	fe 01       	movw	r30, r28
    210e:	ea 5a       	subi	r30, 0xAA	; 170
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	98 2f       	mov	r25, r24
    2116:	99 1f       	adc	r25, r25
    2118:	99 27       	eor	r25, r25
    211a:	99 1f       	adc	r25, r25
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	49 2f       	mov	r20, r25
    2122:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>6)&1));
    2126:	fe 01       	movw	r30, r28
    2128:	ea 5a       	subi	r30, 0xAA	; 170
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	82 95       	swap	r24
    2130:	86 95       	lsr	r24
    2132:	86 95       	lsr	r24
    2134:	83 70       	andi	r24, 0x03	; 3
    2136:	98 2f       	mov	r25, r24
    2138:	91 70       	andi	r25, 0x01	; 1
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	65 e0       	ldi	r22, 0x05	; 5
    213e:	49 2f       	mov	r20, r25
    2140:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>5)&1));
    2144:	fe 01       	movw	r30, r28
    2146:	ea 5a       	subi	r30, 0xAA	; 170
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	82 95       	swap	r24
    214e:	86 95       	lsr	r24
    2150:	87 70       	andi	r24, 0x07	; 7
    2152:	98 2f       	mov	r25, r24
    2154:	91 70       	andi	r25, 0x01	; 1
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	49 2f       	mov	r20, r25
    215c:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>4)&1));
    2160:	fe 01       	movw	r30, r28
    2162:	ea 5a       	subi	r30, 0xAA	; 170
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	82 95       	swap	r24
    216a:	8f 70       	andi	r24, 0x0F	; 15
    216c:	98 2f       	mov	r25, r24
    216e:	91 70       	andi	r25, 0x01	; 1
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	63 e0       	ldi	r22, 0x03	; 3
    2174:	49 2f       	mov	r20, r25
    2176:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 ea       	ldi	r26, 0xA0	; 160
    218a:	b0 e4       	ldi	r27, 0x40	; 64
    218c:	8d ab       	std	Y+53, r24	; 0x35
    218e:	9e ab       	std	Y+54, r25	; 0x36
    2190:	af ab       	std	Y+55, r26	; 0x37
    2192:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6d a9       	ldd	r22, Y+53	; 0x35
    2196:	7e a9       	ldd	r23, Y+54	; 0x36
    2198:	8f a9       	ldd	r24, Y+55	; 0x37
    219a:	98 ad       	ldd	r25, Y+56	; 0x38
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	55 e4       	ldi	r21, 0x45	; 69
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	89 ab       	std	Y+49, r24	; 0x31
    21ae:	9a ab       	std	Y+50, r25	; 0x32
    21b0:	ab ab       	std	Y+51, r26	; 0x33
    21b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b4:	69 a9       	ldd	r22, Y+49	; 0x31
    21b6:	7a a9       	ldd	r23, Y+50	; 0x32
    21b8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ba:	9c a9       	ldd	r25, Y+52	; 0x34
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <LCD_enuWriteNLatch+0x40a>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <LCD_enuWriteNLatch+0x488>
	else if (__tmp > 65535)
    21d6:	69 a9       	ldd	r22, Y+49	; 0x31
    21d8:	7a a9       	ldd	r23, Y+50	; 0x32
    21da:	8b a9       	ldd	r24, Y+51	; 0x33
    21dc:	9c a9       	ldd	r25, Y+52	; 0x34
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <LCD_enuWriteNLatch+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6d a9       	ldd	r22, Y+53	; 0x35
    21f0:	7e a9       	ldd	r23, Y+54	; 0x36
    21f2:	8f a9       	ldd	r24, Y+55	; 0x37
    21f4:	98 ad       	ldd	r25, Y+56	; 0x38
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	98 ab       	std	Y+48, r25	; 0x30
    2214:	8f a7       	std	Y+47, r24	; 0x2f
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_enuWriteNLatch+0x46a>
    2218:	80 e9       	ldi	r24, 0x90	; 144
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	9e a7       	std	Y+46, r25	; 0x2e
    221e:	8d a7       	std	Y+45, r24	; 0x2d
    2220:	8d a5       	ldd	r24, Y+45	; 0x2d
    2222:	9e a5       	ldd	r25, Y+46	; 0x2e
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_enuWriteNLatch+0x458>
    2228:	9e a7       	std	Y+46, r25	; 0x2e
    222a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8f a5       	ldd	r24, Y+47	; 0x2f
    222e:	98 a9       	ldd	r25, Y+48	; 0x30
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	98 ab       	std	Y+48, r25	; 0x30
    2234:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <LCD_enuWriteNLatch+0x44c>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <LCD_enuWriteNLatch+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	69 a9       	ldd	r22, Y+49	; 0x31
    2242:	7a a9       	ldd	r23, Y+50	; 0x32
    2244:	8b a9       	ldd	r24, Y+51	; 0x33
    2246:	9c a9       	ldd	r25, Y+52	; 0x34
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	98 ab       	std	Y+48, r25	; 0x30
    2252:	8f a7       	std	Y+47, r24	; 0x2f
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	9c a7       	std	Y+44, r25	; 0x2c
    225a:	8b a7       	std	Y+43, r24	; 0x2b
    225c:	8b a5       	ldd	r24, Y+43	; 0x2b
    225e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_enuWriteNLatch+0x494>
    2264:	9c a7       	std	Y+44, r25	; 0x2c
    2266:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 ea       	ldi	r26, 0xA0	; 160
    2278:	b0 e4       	ldi	r27, 0x40	; 64
    227a:	8f a3       	std	Y+39, r24	; 0x27
    227c:	98 a7       	std	Y+40, r25	; 0x28
    227e:	a9 a7       	std	Y+41, r26	; 0x29
    2280:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6f a1       	ldd	r22, Y+39	; 0x27
    2284:	78 a5       	ldd	r23, Y+40	; 0x28
    2286:	89 a5       	ldd	r24, Y+41	; 0x29
    2288:	9a a5       	ldd	r25, Y+42	; 0x2a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a e7       	ldi	r20, 0x7A	; 122
    2290:	55 e4       	ldi	r21, 0x45	; 69
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8b a3       	std	Y+35, r24	; 0x23
    229c:	9c a3       	std	Y+36, r25	; 0x24
    229e:	ad a3       	std	Y+37, r26	; 0x25
    22a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_enuWriteNLatch+0x4f8>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_enuWriteNLatch+0x576>
	else if (__tmp > 65535)
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_enuWriteNLatch+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6f a1       	ldd	r22, Y+39	; 0x27
    22de:	78 a5       	ldd	r23, Y+40	; 0x28
    22e0:	89 a5       	ldd	r24, Y+41	; 0x29
    22e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_enuWriteNLatch+0x558>
    2306:	80 e9       	ldi	r24, 0x90	; 144
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	98 a3       	std	Y+32, r25	; 0x20
    230c:	8f 8f       	std	Y+31, r24	; 0x1f
    230e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2310:	98 a1       	ldd	r25, Y+32	; 0x20
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_enuWriteNLatch+0x546>
    2316:	98 a3       	std	Y+32, r25	; 0x20
    2318:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9a a3       	std	Y+34, r25	; 0x22
    2322:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_enuWriteNLatch+0x53a>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_enuWriteNLatch+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6b a1       	ldd	r22, Y+35	; 0x23
    2330:	7c a1       	ldd	r23, Y+36	; 0x24
    2332:	8d a1       	ldd	r24, Y+37	; 0x25
    2334:	9e a1       	ldd	r25, Y+38	; 0x26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	9e 8f       	std	Y+30, r25	; 0x1e
    2348:	8d 8f       	std	Y+29, r24	; 0x1d
    234a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_enuWriteNLatch+0x582>
    2352:	9e 8f       	std	Y+30, r25	; 0x1e
    2354:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	DIO_enuSetPinValue(D7_PORT, D7_PIN , ((Copy_u8Data>>3)&1));
    2356:	fe 01       	movw	r30, r28
    2358:	ea 5a       	subi	r30, 0xAA	; 170
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	86 95       	lsr	r24
    2364:	98 2f       	mov	r25, r24
    2366:	91 70       	andi	r25, 0x01	; 1
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	66 e0       	ldi	r22, 0x06	; 6
    236c:	49 2f       	mov	r20, r25
    236e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN , ((Copy_u8Data>>2)&1));
    2372:	fe 01       	movw	r30, r28
    2374:	ea 5a       	subi	r30, 0xAA	; 170
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	86 95       	lsr	r24
    237c:	86 95       	lsr	r24
    237e:	98 2f       	mov	r25, r24
    2380:	91 70       	andi	r25, 0x01	; 1
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	65 e0       	ldi	r22, 0x05	; 5
    2386:	49 2f       	mov	r20, r25
    2388:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN , ((Copy_u8Data>>1)&1));
    238c:	fe 01       	movw	r30, r28
    238e:	ea 5a       	subi	r30, 0xAA	; 170
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	86 95       	lsr	r24
    2396:	98 2f       	mov	r25, r24
    2398:	91 70       	andi	r25, 0x01	; 1
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	64 e0       	ldi	r22, 0x04	; 4
    239e:	49 2f       	mov	r20, r25
    23a0:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN , ((Copy_u8Data>>0)&1));
    23a4:	fe 01       	movw	r30, r28
    23a6:	ea 5a       	subi	r30, 0xAA	; 170
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	98 2f       	mov	r25, r24
    23ae:	91 70       	andi	r25, 0x01	; 1
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	63 e0       	ldi	r22, 0x03	; 3
    23b4:	49 2f       	mov	r20, r25
    23b6:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN , DIO_u8HIGH);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 ea       	ldi	r26, 0xA0	; 160
    23ca:	b0 e4       	ldi	r27, 0x40	; 64
    23cc:	89 8f       	std	Y+25, r24	; 0x19
    23ce:	9a 8f       	std	Y+26, r25	; 0x1a
    23d0:	ab 8f       	std	Y+27, r26	; 0x1b
    23d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	69 8d       	ldd	r22, Y+25	; 0x19
    23d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a e7       	ldi	r20, 0x7A	; 122
    23e2:	55 e4       	ldi	r21, 0x45	; 69
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8d 8b       	std	Y+21, r24	; 0x15
    23ee:	9e 8b       	std	Y+22, r25	; 0x16
    23f0:	af 8b       	std	Y+23, r26	; 0x17
    23f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f4:	6d 89       	ldd	r22, Y+21	; 0x15
    23f6:	7e 89       	ldd	r23, Y+22	; 0x16
    23f8:	8f 89       	ldd	r24, Y+23	; 0x17
    23fa:	98 8d       	ldd	r25, Y+24	; 0x18
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <LCD_enuWriteNLatch+0x64a>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <LCD_enuWriteNLatch+0x6c8>
	else if (__tmp > 65535)
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <LCD_enuWriteNLatch+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	69 8d       	ldd	r22, Y+25	; 0x19
    2430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9c 8b       	std	Y+20, r25	; 0x14
    2454:	8b 8b       	std	Y+19, r24	; 0x13
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <LCD_enuWriteNLatch+0x6aa>
    2458:	80 e9       	ldi	r24, 0x90	; 144
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	9a 8b       	std	Y+18, r25	; 0x12
    245e:	89 8b       	std	Y+17, r24	; 0x11
    2460:	89 89       	ldd	r24, Y+17	; 0x11
    2462:	9a 89       	ldd	r25, Y+18	; 0x12
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_enuWriteNLatch+0x698>
    2468:	9a 8b       	std	Y+18, r25	; 0x12
    246a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9c 8b       	std	Y+20, r25	; 0x14
    2474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8b 89       	ldd	r24, Y+19	; 0x13
    2478:	9c 89       	ldd	r25, Y+20	; 0x14
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <LCD_enuWriteNLatch+0x68c>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <LCD_enuWriteNLatch+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9c 8b       	std	Y+20, r25	; 0x14
    2492:	8b 8b       	std	Y+19, r24	; 0x13
    2494:	8b 89       	ldd	r24, Y+19	; 0x13
    2496:	9c 89       	ldd	r25, Y+20	; 0x14
    2498:	98 8b       	std	Y+16, r25	; 0x10
    249a:	8f 87       	std	Y+15, r24	; 0x0f
    249c:	8f 85       	ldd	r24, Y+15	; 0x0f
    249e:	98 89       	ldd	r25, Y+16	; 0x10
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_enuWriteNLatch+0x6d4>
    24a4:	98 8b       	std	Y+16, r25	; 0x10
    24a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 ea       	ldi	r26, 0xA0	; 160
    24b8:	b0 e4       	ldi	r27, 0x40	; 64
    24ba:	8b 87       	std	Y+11, r24	; 0x0b
    24bc:	9c 87       	std	Y+12, r25	; 0x0c
    24be:	ad 87       	std	Y+13, r26	; 0x0d
    24c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4a e7       	ldi	r20, 0x7A	; 122
    24d0:	55 e4       	ldi	r21, 0x45	; 69
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	8f 83       	std	Y+7, r24	; 0x07
    24dc:	98 87       	std	Y+8, r25	; 0x08
    24de:	a9 87       	std	Y+9, r26	; 0x09
    24e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e8       	ldi	r20, 0x80	; 128
    24f0:	5f e3       	ldi	r21, 0x3F	; 63
    24f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	2c f4       	brge	.+10     	; 0x2504 <LCD_enuWriteNLatch+0x738>
		__ticks = 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	3f c0       	rjmp	.+126    	; 0x2582 <LCD_enuWriteNLatch+0x7b6>
	else if (__tmp > 65535)
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	3f ef       	ldi	r19, 0xFF	; 255
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	57 e4       	ldi	r21, 0x47	; 71
    2514:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	4c f5       	brge	.+82     	; 0x256e <LCD_enuWriteNLatch+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e2       	ldi	r20, 0x20	; 32
    252a:	51 e4       	ldi	r21, 0x41	; 65
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	0f c0       	rjmp	.+30     	; 0x2564 <LCD_enuWriteNLatch+0x798>
    2546:	80 e9       	ldi	r24, 0x90	; 144
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	9c 83       	std	Y+4, r25	; 0x04
    254c:	8b 83       	std	Y+3, r24	; 0x03
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_enuWriteNLatch+0x786>
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	69 f7       	brne	.-38     	; 0x2546 <LCD_enuWriteNLatch+0x77a>
    256c:	14 c0       	rjmp	.+40     	; 0x2596 <LCD_enuWriteNLatch+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_enuWriteNLatch+0x7c2>
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
#else
#error"LCD mode is wrong"
#endif


	return Local_u8ErrorState;
    2596:	fe 01       	movw	r30, r28
    2598:	eb 5a       	subi	r30, 0xAB	; 171
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
}
    259e:	ca 5a       	subi	r28, 0xAA	; 170
    25a0:	df 4f       	sbci	r29, 0xFF	; 255
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	08 95       	ret

000025b6 <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(C1_GROUP,C1_PIN,DIO_u8OUTPUT);
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_GROUP,C2_PIN,DIO_u8OUTPUT);
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	63 e0       	ldi	r22, 0x03	; 3
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_GROUP,C3_PIN,DIO_u8OUTPUT);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	64 e0       	ldi	r22, 0x04	; 4
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_GROUP,C4_PIN,DIO_u8OUTPUT);
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	65 e0       	ldi	r22, 0x05	; 5
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_GROUP,R1_PIN,DIO_u8INPUT);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	64 e0       	ldi	r22, 0x04	; 4
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_GROUP,R2_PIN,DIO_u8INPUT);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	65 e0       	ldi	r22, 0x05	; 5
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_GROUP,R3_PIN,DIO_u8INPUT);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	66 e0       	ldi	r22, 0x06	; 6
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_GROUP,R4_PIN,DIO_u8INPUT);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	67 e0       	ldi	r22, 0x07	; 7
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_GROUP,C1_PIN,DIO_u8HIGH);
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	62 e0       	ldi	r22, 0x02	; 2
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_GROUP,C2_PIN,DIO_u8HIGH);
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	63 e0       	ldi	r22, 0x03	; 3
    2622:	41 e0       	ldi	r20, 0x01	; 1
    2624:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_GROUP,C3_PIN,DIO_u8HIGH);
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	64 e0       	ldi	r22, 0x04	; 4
    262c:	41 e0       	ldi	r20, 0x01	; 1
    262e:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_GROUP,C4_PIN,DIO_u8HIGH);
    2632:	83 e0       	ldi	r24, 0x03	; 3
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_GROUP,R1_PIN,DIO_u8PULL_UP);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	64 e0       	ldi	r22, 0x04	; 4
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_GROUP,R2_PIN,DIO_u8PULL_UP);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	65 e0       	ldi	r22, 0x05	; 5
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_GROUP,R3_PIN,DIO_u8PULL_UP);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	66 e0       	ldi	r22, 0x06	; 6
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_GROUP,R4_PIN,DIO_u8PULL_UP);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	67 e0       	ldi	r22, 0x07	; 7
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    2664:	89 81       	ldd	r24, Y+1	; 0x01
}
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <Keypad_enuGetPressed>:

ES_t Keypad_enuGetPressed(u8 * Copy_pu8PressedKey)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	ea 97       	sbiw	r28, 0x3a	; 58
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	9d ab       	std	Y+53, r25	; 0x35
    2684:	8c ab       	std	Y+52, r24	; 0x34
	ES_t Local_enuErrorState = ES_NOK;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	8a 8b       	std	Y+18, r24	; 0x12

	u8 Local_Au8RowGrp[]={R1_GROUP,R2_GROUP,R3_GROUP,R4_GROUP};
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	8b 8b       	std	Y+19, r24	; 0x13
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	8c 8b       	std	Y+20, r24	; 0x14
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8ColGrp[]={C1_GROUP,C2_GROUP,C3_GROUP,C4_GROUP};
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	8f 8b       	std	Y+23, r24	; 0x17
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	88 8f       	std	Y+24, r24	; 0x18
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	89 8f       	std	Y+25, r24	; 0x19
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	8a 8f       	std	Y+26, r24	; 0x1a

	u8 Local_Au8RowPin[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	8b 8f       	std	Y+27, r24	; 0x1b
    26ae:	85 e0       	ldi	r24, 0x05	; 5
    26b0:	8c 8f       	std	Y+28, r24	; 0x1c
    26b2:	86 e0       	ldi	r24, 0x06	; 6
    26b4:	8d 8f       	std	Y+29, r24	; 0x1d
    26b6:	87 e0       	ldi	r24, 0x07	; 7
    26b8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_Au8ColPin[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	8f 8f       	std	Y+31, r24	; 0x1f
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	88 a3       	std	Y+32, r24	; 0x20
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	89 a3       	std	Y+33, r24	; 0x21
    26c6:	85 e0       	ldi	r24, 0x05	; 5
    26c8:	8a a3       	std	Y+34, r24	; 0x22

	u8 Local_u8RowIter = 0 , Local_u8ColIter = 0;
    26ca:	19 8a       	std	Y+17, r1	; 0x11
    26cc:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;
    26ce:	8f ef       	ldi	r24, 0xFF	; 255
    26d0:	8b a3       	std	Y+35, r24	; 0x23
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_u8ColIter = 0 ; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
    26d6:	18 8a       	std	Y+16, r1	; 0x10
    26d8:	3b c1       	rjmp	.+630    	; 0x2950 <Keypad_enuGetPressed+0x2e2>
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW);
    26da:	88 89       	ldd	r24, Y+16	; 0x10
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	ce 01       	movw	r24, r28
    26e2:	47 96       	adiw	r24, 0x17	; 23
    26e4:	fc 01       	movw	r30, r24
    26e6:	e2 0f       	add	r30, r18
    26e8:	f3 1f       	adc	r31, r19
    26ea:	40 81       	ld	r20, Z
    26ec:	88 89       	ldd	r24, Y+16	; 0x10
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	ce 01       	movw	r24, r28
    26f4:	4f 96       	adiw	r24, 0x1f	; 31
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	90 81       	ld	r25, Z
    26fe:	84 2f       	mov	r24, r20
    2700:	69 2f       	mov	r22, r25
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
		for(Local_u8RowIter = 0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    2708:	19 8a       	std	Y+17, r1	; 0x11
    270a:	04 c1       	rjmp	.+520    	; 0x2914 <Keypad_enuGetPressed+0x2a6>
		{
			DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    270c:	89 89       	ldd	r24, Y+17	; 0x11
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	43 96       	adiw	r24, 0x13	; 19
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	40 81       	ld	r20, Z
    271e:	89 89       	ldd	r24, Y+17	; 0x11
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	ce 01       	movw	r24, r28
    2726:	4b 96       	adiw	r24, 0x1b	; 27
    2728:	fc 01       	movw	r30, r24
    272a:	e2 0f       	add	r30, r18
    272c:	f3 1f       	adc	r31, r19
    272e:	90 81       	ld	r25, Z
    2730:	9e 01       	movw	r18, r28
    2732:	2d 5d       	subi	r18, 0xDD	; 221
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	84 2f       	mov	r24, r20
    2738:	69 2f       	mov	r22, r25
    273a:	a9 01       	movw	r20, r18
    273c:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    2740:	8b a1       	ldd	r24, Y+35	; 0x23
    2742:	88 23       	and	r24, r24
    2744:	09 f0       	breq	.+2      	; 0x2748 <Keypad_enuGetPressed+0xda>
    2746:	e3 c0       	rjmp	.+454    	; 0x290e <Keypad_enuGetPressed+0x2a0>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e2       	ldi	r26, 0x20	; 32
    274e:	b1 e4       	ldi	r27, 0x41	; 65
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	55 e4       	ldi	r21, 0x45	; 69
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <Keypad_enuGetPressed+0x12c>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <Keypad_enuGetPressed+0x1aa>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <Keypad_enuGetPressed+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <Keypad_enuGetPressed+0x18c>
    27dc:	80 e9       	ldi	r24, 0x90	; 144
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <Keypad_enuGetPressed+0x17a>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <Keypad_enuGetPressed+0x16e>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <Keypad_enuGetPressed+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <Keypad_enuGetPressed+0x1b6>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    282c:	89 89       	ldd	r24, Y+17	; 0x11
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	ce 01       	movw	r24, r28
    2834:	43 96       	adiw	r24, 0x13	; 19
    2836:	fc 01       	movw	r30, r24
    2838:	e2 0f       	add	r30, r18
    283a:	f3 1f       	adc	r31, r19
    283c:	40 81       	ld	r20, Z
    283e:	89 89       	ldd	r24, Y+17	; 0x11
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	ce 01       	movw	r24, r28
    2846:	4b 96       	adiw	r24, 0x1b	; 27
    2848:	fc 01       	movw	r30, r24
    284a:	e2 0f       	add	r30, r18
    284c:	f3 1f       	adc	r31, r19
    284e:	90 81       	ld	r25, Z
    2850:	9e 01       	movw	r18, r28
    2852:	2d 5d       	subi	r18, 0xDD	; 221
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	84 2f       	mov	r24, r20
    2858:	69 2f       	mov	r22, r25
    285a:	a9 01       	movw	r20, r18
    285c:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_enuGetPinValue>
				if(! Local_u8PinValue)
    2860:	8b a1       	ldd	r24, Y+35	; 0x23
    2862:	88 23       	and	r24, r24
    2864:	09 f0       	breq	.+2      	; 0x2868 <Keypad_enuGetPressed+0x1fa>
    2866:	53 c0       	rjmp	.+166    	; 0x290e <Keypad_enuGetPressed+0x2a0>
    2868:	1a c0       	rjmp	.+52     	; 0x289e <Keypad_enuGetPressed+0x230>
				{
					while(! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    286a:	89 89       	ldd	r24, Y+17	; 0x11
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	ce 01       	movw	r24, r28
    2872:	43 96       	adiw	r24, 0x13	; 19
    2874:	fc 01       	movw	r30, r24
    2876:	e2 0f       	add	r30, r18
    2878:	f3 1f       	adc	r31, r19
    287a:	40 81       	ld	r20, Z
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	ce 01       	movw	r24, r28
    2884:	4b 96       	adiw	r24, 0x1b	; 27
    2886:	fc 01       	movw	r30, r24
    2888:	e2 0f       	add	r30, r18
    288a:	f3 1f       	adc	r31, r19
    288c:	90 81       	ld	r25, Z
    288e:	9e 01       	movw	r18, r28
    2890:	2d 5d       	subi	r18, 0xDD	; 221
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	84 2f       	mov	r24, r20
    2896:	69 2f       	mov	r22, r25
    2898:	a9 01       	movw	r20, r18
    289a:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
				if(! Local_u8PinValue)
				{
					while(! Local_u8PinValue)
    289e:	8b a1       	ldd	r24, Y+35	; 0x23
    28a0:	88 23       	and	r24, r24
    28a2:	19 f3       	breq	.-58     	; 0x286a <Keypad_enuGetPressed+0x1fc>
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);

					u8 Local_Au8KeysValues[ROW_NUM][COL_NUM] = KEYS_VALUES;
    28a4:	ce 01       	movw	r24, r28
    28a6:	84 96       	adiw	r24, 0x24	; 36
    28a8:	9f ab       	std	Y+55, r25	; 0x37
    28aa:	8e ab       	std	Y+54, r24	; 0x36
    28ac:	ea e8       	ldi	r30, 0x8A	; 138
    28ae:	f1 e0       	ldi	r31, 0x01	; 1
    28b0:	f9 af       	std	Y+57, r31	; 0x39
    28b2:	e8 af       	std	Y+56, r30	; 0x38
    28b4:	f0 e1       	ldi	r31, 0x10	; 16
    28b6:	fa af       	std	Y+58, r31	; 0x3a
    28b8:	e8 ad       	ldd	r30, Y+56	; 0x38
    28ba:	f9 ad       	ldd	r31, Y+57	; 0x39
    28bc:	00 80       	ld	r0, Z
    28be:	88 ad       	ldd	r24, Y+56	; 0x38
    28c0:	99 ad       	ldd	r25, Y+57	; 0x39
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	99 af       	std	Y+57, r25	; 0x39
    28c6:	88 af       	std	Y+56, r24	; 0x38
    28c8:	ee a9       	ldd	r30, Y+54	; 0x36
    28ca:	ff a9       	ldd	r31, Y+55	; 0x37
    28cc:	00 82       	st	Z, r0
    28ce:	8e a9       	ldd	r24, Y+54	; 0x36
    28d0:	9f a9       	ldd	r25, Y+55	; 0x37
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	9f ab       	std	Y+55, r25	; 0x37
    28d6:	8e ab       	std	Y+54, r24	; 0x36
    28d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28da:	91 50       	subi	r25, 0x01	; 1
    28dc:	9a af       	std	Y+58, r25	; 0x3a
    28de:	ea ad       	ldd	r30, Y+58	; 0x3a
    28e0:	ee 23       	and	r30, r30
    28e2:	51 f7       	brne	.-44     	; 0x28b8 <Keypad_enuGetPressed+0x24a>
					Local_u8KeyValue =  Local_Au8KeysValues[Local_u8RowIter][Local_u8ColIter];
    28e4:	89 89       	ldd	r24, Y+17	; 0x11
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	88 89       	ldd	r24, Y+16	; 0x10
    28ec:	48 2f       	mov	r20, r24
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	ce 01       	movw	r24, r28
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	82 0f       	add	r24, r18
    28fe:	93 1f       	adc	r25, r19
    2900:	84 0f       	add	r24, r20
    2902:	95 1f       	adc	r25, r21
    2904:	fc 01       	movw	r30, r24
    2906:	b3 96       	adiw	r30, 0x23	; 35
    2908:	80 81       	ld	r24, Z
    290a:	8f 87       	std	Y+15, r24	; 0x0f

					Local_enuErrorState = ES_OK;
    290c:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;

	for(Local_u8ColIter = 0 ; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW);
		for(Local_u8RowIter = 0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    290e:	89 89       	ldd	r24, Y+17	; 0x11
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	89 8b       	std	Y+17, r24	; 0x11
    2914:	89 89       	ldd	r24, Y+17	; 0x11
    2916:	84 30       	cpi	r24, 0x04	; 4
    2918:	08 f4       	brcc	.+2      	; 0x291c <Keypad_enuGetPressed+0x2ae>
    291a:	f8 ce       	rjmp	.-528    	; 0x270c <Keypad_enuGetPressed+0x9e>

					Local_enuErrorState = ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH);
    291c:	88 89       	ldd	r24, Y+16	; 0x10
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	ce 01       	movw	r24, r28
    2924:	47 96       	adiw	r24, 0x17	; 23
    2926:	fc 01       	movw	r30, r24
    2928:	e2 0f       	add	r30, r18
    292a:	f3 1f       	adc	r31, r19
    292c:	40 81       	ld	r20, Z
    292e:	88 89       	ldd	r24, Y+16	; 0x10
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	ce 01       	movw	r24, r28
    2936:	4f 96       	adiw	r24, 0x1f	; 31
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	90 81       	ld	r25, Z
    2940:	84 2f       	mov	r24, r20
    2942:	69 2f       	mov	r22, r25
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_enuSetPinValue>
	u8 Local_Au8ColPin[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};

	u8 Local_u8RowIter = 0 , Local_u8ColIter = 0;
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;

	for(Local_u8ColIter = 0 ; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
    294a:	88 89       	ldd	r24, Y+16	; 0x10
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	88 8b       	std	Y+16, r24	; 0x10
    2950:	88 89       	ldd	r24, Y+16	; 0x10
    2952:	84 30       	cpi	r24, 0x04	; 4
    2954:	08 f4       	brcc	.+2      	; 0x2958 <Keypad_enuGetPressed+0x2ea>
    2956:	c1 ce       	rjmp	.-638    	; 0x26da <Keypad_enuGetPressed+0x6c>
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH);
	}
	*Copy_pu8PressedKey= Local_u8KeyValue;
    2958:	ec a9       	ldd	r30, Y+52	; 0x34
    295a:	fd a9       	ldd	r31, Y+53	; 0x35
    295c:	8f 85       	ldd	r24, Y+15	; 0x0f
    295e:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2960:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2962:	ea 96       	adiw	r28, 0x3a	; 58
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <main>:
void Calc_voidClear (void);
void Calc_voidShiftDisp (void);


int main(void)
{
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	a1 97       	sbiw	r28, 0x21	; 33
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61

	Keypad_enuInit();
    2994:	0e 94 db 12 	call	0x25b6	; 0x25b6 <Keypad_enuInit>
	LCD_enuInit();
    2998:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_enuInit>

	while(1)
	{
		Keypad_enuGetPressed(&Calc_u8PressedKey);
    299c:	81 ea       	ldi	r24, 0xA1	; 161
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 37 13 	call	0x266e	; 0x266e <Keypad_enuGetPressed>

		/* Checking if Maximum Operations Number or Maximum Screen Digits is reached */
		if(Calc_MaxOperationFlag || (Calc_u8DispDigitsItr >= MAX_DIGITS))
    29a4:	80 91 9f 01 	lds	r24, 0x019F
    29a8:	88 23       	and	r24, r24
    29aa:	21 f4       	brne	.+8      	; 0x29b4 <main+0x40>
    29ac:	80 91 a7 01 	lds	r24, 0x01A7
    29b0:	84 31       	cpi	r24, 0x14	; 20
    29b2:	28 f0       	brcs	.+10     	; 0x29be <main+0x4a>
		{
			Calc_u8PressedKey = '=';
    29b4:	8d e3       	ldi	r24, 0x3D	; 61
    29b6:	80 93 a1 01 	sts	0x01A1, r24
			Calc_MaxOperationFlag = False;
    29ba:	10 92 9f 01 	sts	0x019F, r1
		}
		else{/* Do Nothing */}


		/* Checking for Entry after Displaying the Result */
		if (Calc_u8PressedKey != 0xFF)
    29be:	80 91 a1 01 	lds	r24, 0x01A1
    29c2:	8f 3f       	cpi	r24, 0xFF	; 255
    29c4:	59 f3       	breq	.-42     	; 0x299c <main+0x28>
		{
			if (Calc_u8ResultExistFlag)
    29c6:	80 91 9c 01 	lds	r24, 0x019C
    29ca:	88 23       	and	r24, r24
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <main+0x5c>
    29ce:	3e c0       	rjmp	.+124    	; 0x2a4c <main+0xd8>
			{
				if ((Calc_u8PressedKey == 'x') || (Calc_u8PressedKey == '/') ||
    29d0:	80 91 a1 01 	lds	r24, 0x01A1
    29d4:	88 37       	cpi	r24, 0x78	; 120
    29d6:	61 f0       	breq	.+24     	; 0x29f0 <main+0x7c>
    29d8:	80 91 a1 01 	lds	r24, 0x01A1
    29dc:	8f 32       	cpi	r24, 0x2F	; 47
    29de:	41 f0       	breq	.+16     	; 0x29f0 <main+0x7c>
    29e0:	80 91 a1 01 	lds	r24, 0x01A1
    29e4:	8b 32       	cpi	r24, 0x2B	; 43
    29e6:	21 f0       	breq	.+8      	; 0x29f0 <main+0x7c>
    29e8:	80 91 a1 01 	lds	r24, 0x01A1
    29ec:	8d 32       	cpi	r24, 0x2D	; 45
    29ee:	21 f5       	brne	.+72     	; 0x2a38 <main+0xc4>
						(Calc_u8PressedKey == '+') || (Calc_u8PressedKey == '-'))
				{
					Calc_voidClear();
    29f0:	0e 94 77 19 	call	0x32ee	; 0x32ee <Calc_voidClear>
					Calc_f32Operand[Calc_u8OperandIndex] = Calc_f64Result;
    29f4:	80 91 ad 01 	lds	r24, 0x01AD
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	20 91 a3 01 	lds	r18, 0x01A3
    2a00:	30 91 a4 01 	lds	r19, 0x01A4
    2a04:	40 91 a5 01 	lds	r20, 0x01A5
    2a08:	50 91 a6 01 	lds	r21, 0x01A6
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	fc 01       	movw	r30, r24
    2a16:	e2 55       	subi	r30, 0x52	; 82
    2a18:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1a:	20 83       	st	Z, r18
    2a1c:	31 83       	std	Z+1, r19	; 0x01
    2a1e:	42 83       	std	Z+2, r20	; 0x02
    2a20:	53 83       	std	Z+3, r21	; 0x03

					LCD_enuSendString("ANS");
    2a22:	80 e6       	ldi	r24, 0x60	; 96
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_enuSendString>
					Calc_u8DispDigitsItr = 3;
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	80 93 a7 01 	sts	0x01A7, r24

					Calc_u8LastOperandFlag = True;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	80 93 9b 01 	sts	0x019B, r24
    2a36:	0a c0       	rjmp	.+20     	; 0x2a4c <main+0xd8>
				}
				else if ((Calc_u8PressedKey >= '0') && (Calc_u8PressedKey <= '9'))
    2a38:	80 91 a1 01 	lds	r24, 0x01A1
    2a3c:	80 33       	cpi	r24, 0x30	; 48
    2a3e:	30 f0       	brcs	.+12     	; 0x2a4c <main+0xd8>
    2a40:	80 91 a1 01 	lds	r24, 0x01A1
    2a44:	8a 33       	cpi	r24, 0x3A	; 58
    2a46:	10 f4       	brcc	.+4      	; 0x2a4c <main+0xd8>
				{
					Calc_voidClear();
    2a48:	0e 94 77 19 	call	0x32ee	; 0x32ee <Calc_voidClear>
			}
			else { /* Do Nothing */ }


			/* Checking the Entered Key */
			switch (Calc_u8PressedKey)
    2a4c:	80 91 a1 01 	lds	r24, 0x01A1
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	39 a3       	std	Y+33, r19	; 0x21
    2a56:	28 a3       	std	Y+32, r18	; 0x20
    2a58:	88 a1       	ldd	r24, Y+32	; 0x20
    2a5a:	99 a1       	ldd	r25, Y+33	; 0x21
    2a5c:	8a 33       	cpi	r24, 0x3A	; 58
    2a5e:	91 05       	cpc	r25, r1
    2a60:	c4 f4       	brge	.+48     	; 0x2a92 <main+0x11e>
    2a62:	28 a1       	ldd	r18, Y+32	; 0x20
    2a64:	39 a1       	ldd	r19, Y+33	; 0x21
    2a66:	20 33       	cpi	r18, 0x30	; 48
    2a68:	31 05       	cpc	r19, r1
    2a6a:	44 f5       	brge	.+80     	; 0x2abc <main+0x148>
    2a6c:	88 a1       	ldd	r24, Y+32	; 0x20
    2a6e:	99 a1       	ldd	r25, Y+33	; 0x21
    2a70:	8d 32       	cpi	r24, 0x2D	; 45
    2a72:	91 05       	cpc	r25, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <main+0x104>
    2a76:	1a c1       	rjmp	.+564    	; 0x2cac <main+0x338>
    2a78:	28 a1       	ldd	r18, Y+32	; 0x20
    2a7a:	39 a1       	ldd	r19, Y+33	; 0x21
    2a7c:	2f 32       	cpi	r18, 0x2F	; 47
    2a7e:	31 05       	cpc	r19, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <main+0x110>
    2a82:	be c1       	rjmp	.+892    	; 0x2e00 <main+0x48c>
    2a84:	88 a1       	ldd	r24, Y+32	; 0x20
    2a86:	99 a1       	ldd	r25, Y+33	; 0x21
    2a88:	8b 32       	cpi	r24, 0x2B	; 43
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <main+0x11c>
    2a8e:	bf c0       	rjmp	.+382    	; 0x2c0e <main+0x29a>
    2a90:	05 c3       	rjmp	.+1546   	; 0x309c <main+0x728>
    2a92:	28 a1       	ldd	r18, Y+32	; 0x20
    2a94:	39 a1       	ldd	r19, Y+33	; 0x21
    2a96:	23 34       	cpi	r18, 0x43	; 67
    2a98:	31 05       	cpc	r19, r1
    2a9a:	69 f0       	breq	.+26     	; 0x2ab6 <main+0x142>
    2a9c:	88 a1       	ldd	r24, Y+32	; 0x20
    2a9e:	99 a1       	ldd	r25, Y+33	; 0x21
    2aa0:	88 37       	cpi	r24, 0x78	; 120
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <main+0x134>
    2aa6:	5d c1       	rjmp	.+698    	; 0x2d62 <main+0x3ee>
    2aa8:	28 a1       	ldd	r18, Y+32	; 0x20
    2aaa:	39 a1       	ldd	r19, Y+33	; 0x21
    2aac:	2d 33       	cpi	r18, 0x3D	; 61
    2aae:	31 05       	cpc	r19, r1
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <main+0x140>
    2ab2:	f5 c1       	rjmp	.+1002   	; 0x2e9e <main+0x52a>
    2ab4:	f3 c2       	rjmp	.+1510   	; 0x309c <main+0x728>
			{
				case 'C':
					Calc_voidClear();
    2ab6:	0e 94 77 19 	call	0x32ee	; 0x32ee <Calc_voidClear>
    2aba:	f0 c2       	rjmp	.+1504   	; 0x309c <main+0x728>
					break;

				case '0'...'9':			/* Operand Digits Entry */
					Calc_f32Operand[Calc_u8OperandIndex] *= 10;
    2abc:	80 91 ad 01 	lds	r24, 0x01AD
    2ac0:	08 2f       	mov	r16, r24
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	80 91 ad 01 	lds	r24, 0x01AD
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e2 55       	subi	r30, 0x52	; 82
    2ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae0:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9c 01       	movw	r18, r24
    2af8:	ad 01       	movw	r20, r26
    2afa:	c8 01       	movw	r24, r16
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	fc 01       	movw	r30, r24
    2b06:	e2 55       	subi	r30, 0x52	; 82
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	20 83       	st	Z, r18
    2b0c:	31 83       	std	Z+1, r19	; 0x01
    2b0e:	42 83       	std	Z+2, r20	; 0x02
    2b10:	53 83       	std	Z+3, r21	; 0x03
					if (Calc_u8SignFlag == True)
    2b12:	80 91 9a 01 	lds	r24, 0x019A
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	d1 f5       	brne	.+116    	; 0x2b8e <main+0x21a>
					{
						Calc_f32Operand[Calc_u8OperandIndex] += -1 * (Calc_u8PressedKey - '0');
    2b1a:	80 91 ad 01 	lds	r24, 0x01AD
    2b1e:	c8 2e       	mov	r12, r24
    2b20:	dd 24       	eor	r13, r13
    2b22:	80 91 ad 01 	lds	r24, 0x01AD
    2b26:	88 2f       	mov	r24, r24
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	fc 01       	movw	r30, r24
    2b34:	e2 55       	subi	r30, 0x52	; 82
    2b36:	fe 4f       	sbci	r31, 0xFE	; 254
    2b38:	e0 80       	ld	r14, Z
    2b3a:	f1 80       	ldd	r15, Z+1	; 0x01
    2b3c:	02 81       	ldd	r16, Z+2	; 0x02
    2b3e:	13 81       	ldd	r17, Z+3	; 0x03
    2b40:	80 91 a1 01 	lds	r24, 0x01A1
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	80 e3       	ldi	r24, 0x30	; 48
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	82 1b       	sub	r24, r18
    2b4e:	93 0b       	sbc	r25, r19
    2b50:	aa 27       	eor	r26, r26
    2b52:	97 fd       	sbrc	r25, 7
    2b54:	a0 95       	com	r26
    2b56:	ba 2f       	mov	r27, r26
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	c8 01       	movw	r24, r16
    2b66:	b7 01       	movw	r22, r14
    2b68:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9c 01       	movw	r18, r24
    2b72:	ad 01       	movw	r20, r26
    2b74:	c6 01       	movw	r24, r12
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	fc 01       	movw	r30, r24
    2b80:	e2 55       	subi	r30, 0x52	; 82
    2b82:	fe 4f       	sbci	r31, 0xFE	; 254
    2b84:	20 83       	st	Z, r18
    2b86:	31 83       	std	Z+1, r19	; 0x01
    2b88:	42 83       	std	Z+2, r20	; 0x02
    2b8a:	53 83       	std	Z+3, r21	; 0x03
    2b8c:	36 c0       	rjmp	.+108    	; 0x2bfa <main+0x286>
					}
					else
					{
						Calc_f32Operand[Calc_u8OperandIndex] +=  1 * (Calc_u8PressedKey - '0');
    2b8e:	80 91 ad 01 	lds	r24, 0x01AD
    2b92:	c8 2e       	mov	r12, r24
    2b94:	dd 24       	eor	r13, r13
    2b96:	80 91 ad 01 	lds	r24, 0x01AD
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e2 55       	subi	r30, 0x52	; 82
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	e0 80       	ld	r14, Z
    2bae:	f1 80       	ldd	r15, Z+1	; 0x01
    2bb0:	02 81       	ldd	r16, Z+2	; 0x02
    2bb2:	13 81       	ldd	r17, Z+3	; 0x03
    2bb4:	80 91 a1 01 	lds	r24, 0x01A1
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	c0 97       	sbiw	r24, 0x30	; 48
    2bbe:	aa 27       	eor	r26, r26
    2bc0:	97 fd       	sbrc	r25, 7
    2bc2:	a0 95       	com	r26
    2bc4:	ba 2f       	mov	r27, r26
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2bce:	9b 01       	movw	r18, r22
    2bd0:	ac 01       	movw	r20, r24
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	b7 01       	movw	r22, r14
    2bd6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 01       	movw	r18, r24
    2be0:	ad 01       	movw	r20, r26
    2be2:	c6 01       	movw	r24, r12
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	fc 01       	movw	r30, r24
    2bee:	e2 55       	subi	r30, 0x52	; 82
    2bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf2:	20 83       	st	Z, r18
    2bf4:	31 83       	std	Z+1, r19	; 0x01
    2bf6:	42 83       	std	Z+2, r20	; 0x02
    2bf8:	53 83       	std	Z+3, r21	; 0x03
					}
					Calc_u8LastOperandFlag = True;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	80 93 9b 01 	sts	0x019B, r24

					Calc_voidShiftDisp();
    2c00:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
					LCD_enuSendData(Calc_u8PressedKey);
    2c04:	80 91 a1 01 	lds	r24, 0x01A1
    2c08:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2c0c:	47 c2       	rjmp	.+1166   	; 0x309c <main+0x728>
					break;

				case '+':
					if (Calc_u8LastOperandFlag)
    2c0e:	80 91 9b 01 	lds	r24, 0x019B
    2c12:	88 23       	and	r24, r24
    2c14:	29 f1       	breq	.+74     	; 0x2c60 <main+0x2ec>
					{
						/* Checking if Maximum Operations Number is reached */
						if (Calc_u8OperationIndex == MAX_OPERATIONS)
    2c16:	80 91 a2 01 	lds	r24, 0x01A2
    2c1a:	85 30       	cpi	r24, 0x05	; 5
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <main+0x2b2>
						{
							Calc_MaxOperationFlag = True;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	80 93 9f 01 	sts	0x019F, r24
    2c24:	3b c2       	rjmp	.+1142   	; 0x309c <main+0x728>
						}
						else
						{
							/* Resetting Sign Flag for New Operand */
							Calc_u8SignFlag = False;
    2c26:	10 92 9a 01 	sts	0x019A, r1
							/* Inserting Operation in Operations Array */
							Calc_u8Operation[Calc_u8OperationIndex++] = CALC_ADD;
    2c2a:	20 91 a2 01 	lds	r18, 0x01A2
    2c2e:	82 2f       	mov	r24, r18
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	fc 01       	movw	r30, r24
    2c34:	e8 55       	subi	r30, 0x58	; 88
    2c36:	fe 4f       	sbci	r31, 0xFE	; 254
    2c38:	8a e0       	ldi	r24, 0x0A	; 10
    2c3a:	80 83       	st	Z, r24
    2c3c:	82 2f       	mov	r24, r18
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	80 93 a2 01 	sts	0x01A2, r24
							Calc_u8OperandIndex++;
    2c44:	80 91 ad 01 	lds	r24, 0x01AD
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	80 93 ad 01 	sts	0x01AD, r24

							Calc_u8LastOperandFlag = False;
    2c4e:	10 92 9b 01 	sts	0x019B, r1

							/* Displaying The Operator */
							Calc_voidShiftDisp();
    2c52:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
							LCD_enuSendData(Calc_u8PressedKey);
    2c56:	80 91 a1 01 	lds	r24, 0x01A1
    2c5a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2c5e:	1e c2       	rjmp	.+1084   	; 0x309c <main+0x728>
						}
					}
					else
					{
						Calc_u8DispDigitsItr--;
    2c60:	80 91 a7 01 	lds	r24, 0x01A7
    2c64:	81 50       	subi	r24, 0x01	; 1
    2c66:	80 93 a7 01 	sts	0x01A7, r24

						Calc_u8Operation[Calc_u8OperationIndex - 1] = CALC_ADD;
    2c6a:	80 91 a2 01 	lds	r24, 0x01A2
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	fc 01       	movw	r30, r24
    2c76:	e8 55       	subi	r30, 0x58	; 88
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	8a e0       	ldi	r24, 0x0A	; 10
    2c7c:	80 83       	st	Z, r24
						LCD_enuSendCommand(0x10);
    2c7e:	80 e1       	ldi	r24, 0x10	; 16
    2c80:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
						if (Calc_u8SignFlag)
    2c84:	80 91 9a 01 	lds	r24, 0x019A
    2c88:	88 23       	and	r24, r24
    2c8a:	59 f0       	breq	.+22     	; 0x2ca2 <main+0x32e>
						{
							LCD_enuSendCommand(0x10);
    2c8c:	80 e1       	ldi	r24, 0x10	; 16
    2c8e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
							LCD_enuSendData(Calc_u8PressedKey);
    2c92:	80 91 a1 01 	lds	r24, 0x01A1
    2c96:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
							LCD_enuSendCommand(0x14);
    2c9a:	84 e1       	ldi	r24, 0x14	; 20
    2c9c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
    2ca0:	fd c1       	rjmp	.+1018   	; 0x309c <main+0x728>
						}
						else
						{
							LCD_enuSendData(Calc_u8PressedKey);
    2ca2:	80 91 a1 01 	lds	r24, 0x01A1
    2ca6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2caa:	f8 c1       	rjmp	.+1008   	; 0x309c <main+0x728>
						}
					}
					break;

				case '-':
					if (Calc_u8LastOperandFlag)
    2cac:	80 91 9b 01 	lds	r24, 0x019B
    2cb0:	88 23       	and	r24, r24
    2cb2:	29 f1       	breq	.+74     	; 0x2cfe <main+0x38a>
					{
						/* Checking if Maximum Operations Number is reached */
						if (Calc_u8OperationIndex == MAX_OPERATIONS)
    2cb4:	80 91 a2 01 	lds	r24, 0x01A2
    2cb8:	85 30       	cpi	r24, 0x05	; 5
    2cba:	21 f4       	brne	.+8      	; 0x2cc4 <main+0x350>
						{
							Calc_MaxOperationFlag = True;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	80 93 9f 01 	sts	0x019F, r24
    2cc2:	ec c1       	rjmp	.+984    	; 0x309c <main+0x728>
						}
						else
						{
							/* Resetting Sign Flag for New Operand */
							Calc_u8SignFlag = False;
    2cc4:	10 92 9a 01 	sts	0x019A, r1
							/* Inserting Operation in Operations Array */
							Calc_u8Operation[Calc_u8OperationIndex++] = CALC_SUB;
    2cc8:	20 91 a2 01 	lds	r18, 0x01A2
    2ccc:	82 2f       	mov	r24, r18
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e8 55       	subi	r30, 0x58	; 88
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	84 e1       	ldi	r24, 0x14	; 20
    2cd8:	80 83       	st	Z, r24
    2cda:	82 2f       	mov	r24, r18
    2cdc:	8f 5f       	subi	r24, 0xFF	; 255
    2cde:	80 93 a2 01 	sts	0x01A2, r24
							Calc_u8OperandIndex++;
    2ce2:	80 91 ad 01 	lds	r24, 0x01AD
    2ce6:	8f 5f       	subi	r24, 0xFF	; 255
    2ce8:	80 93 ad 01 	sts	0x01AD, r24

							Calc_u8LastOperandFlag = False;
    2cec:	10 92 9b 01 	sts	0x019B, r1

							/* Displaying The Operator */
							Calc_voidShiftDisp();
    2cf0:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
							LCD_enuSendData(Calc_u8PressedKey);
    2cf4:	80 91 a1 01 	lds	r24, 0x01A1
    2cf8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2cfc:	cf c1       	rjmp	.+926    	; 0x309c <main+0x728>
						}
					}
					else if (Calc_u8SignFlag)
    2cfe:	80 91 9a 01 	lds	r24, 0x019A
    2d02:	88 23       	and	r24, r24
    2d04:	e9 f0       	breq	.+58     	; 0x2d40 <main+0x3cc>
					{
						/* Replacing Operator on Successive Operators Entry */

						Calc_u8DispDigitsItr--;
    2d06:	80 91 a7 01 	lds	r24, 0x01A7
    2d0a:	81 50       	subi	r24, 0x01	; 1
    2d0c:	80 93 a7 01 	sts	0x01A7, r24

						Calc_u8Operation[Calc_u8OperationIndex - 1] = CALC_SUB;
    2d10:	80 91 a2 01 	lds	r24, 0x01A2
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	e8 55       	subi	r30, 0x58	; 88
    2d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d20:	84 e1       	ldi	r24, 0x14	; 20
    2d22:	80 83       	st	Z, r24
						LCD_enuSendCommand(0x10);
    2d24:	80 e1       	ldi	r24, 0x10	; 16
    2d26:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
						LCD_enuSendCommand(0x10);
    2d2a:	80 e1       	ldi	r24, 0x10	; 16
    2d2c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
						LCD_enuSendData(Calc_u8PressedKey);
    2d30:	80 91 a1 01 	lds	r24, 0x01A1
    2d34:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
						LCD_enuSendCommand(0x14);
    2d38:	84 e1       	ldi	r24, 0x14	; 20
    2d3a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
    2d3e:	ae c1       	rjmp	.+860    	; 0x309c <main+0x728>
					}
					else if (!Calc_u8SignFlag)
    2d40:	80 91 9a 01 	lds	r24, 0x019A
    2d44:	88 23       	and	r24, r24
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <main+0x3d6>
    2d48:	a9 c1       	rjmp	.+850    	; 0x309c <main+0x728>
					{
						/* Setting Sign Flag for Negative Operands */

						Calc_u8SignFlag        = True;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	80 93 9a 01 	sts	0x019A, r24
						Calc_u8LastOperandFlag = False;
    2d50:	10 92 9b 01 	sts	0x019B, r1

						Calc_voidShiftDisp();
    2d54:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
						LCD_enuSendData(Calc_u8PressedKey);
    2d58:	80 91 a1 01 	lds	r24, 0x01A1
    2d5c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2d60:	9d c1       	rjmp	.+826    	; 0x309c <main+0x728>
					}
					break;

				case 'x':
					if (Calc_u8LastOperandFlag)
    2d62:	80 91 9b 01 	lds	r24, 0x019B
    2d66:	88 23       	and	r24, r24
    2d68:	29 f1       	breq	.+74     	; 0x2db4 <main+0x440>
					{
						/* Checking if Maximum Operations Number is reached */
						if (Calc_u8OperationIndex == MAX_OPERATIONS)
    2d6a:	80 91 a2 01 	lds	r24, 0x01A2
    2d6e:	85 30       	cpi	r24, 0x05	; 5
    2d70:	21 f4       	brne	.+8      	; 0x2d7a <main+0x406>
						{
							Calc_MaxOperationFlag = True;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	80 93 9f 01 	sts	0x019F, r24
    2d78:	91 c1       	rjmp	.+802    	; 0x309c <main+0x728>
						}
						else
						{
							/* Resetting Sign Flag for New Operand */
							Calc_u8SignFlag = False;
    2d7a:	10 92 9a 01 	sts	0x019A, r1
							/* Inserting Operation in Operations Array */
							Calc_u8Operation[Calc_u8OperationIndex++] = CALC_MUL;
    2d7e:	20 91 a2 01 	lds	r18, 0x01A2
    2d82:	82 2f       	mov	r24, r18
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	fc 01       	movw	r30, r24
    2d88:	e8 55       	subi	r30, 0x58	; 88
    2d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8c:	88 e2       	ldi	r24, 0x28	; 40
    2d8e:	80 83       	st	Z, r24
    2d90:	82 2f       	mov	r24, r18
    2d92:	8f 5f       	subi	r24, 0xFF	; 255
    2d94:	80 93 a2 01 	sts	0x01A2, r24
							Calc_u8OperandIndex++;
    2d98:	80 91 ad 01 	lds	r24, 0x01AD
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	80 93 ad 01 	sts	0x01AD, r24

							Calc_u8LastOperandFlag = False;
    2da2:	10 92 9b 01 	sts	0x019B, r1

							/* Displaying The Operator */
							Calc_voidShiftDisp();
    2da6:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
							LCD_enuSendData(Calc_u8PressedKey);
    2daa:	80 91 a1 01 	lds	r24, 0x01A1
    2dae:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2db2:	74 c1       	rjmp	.+744    	; 0x309c <main+0x728>
						}
					}
					else	/* Replacing Operator on Successive Operators Entry */
					{
						Calc_u8DispDigitsItr--;
    2db4:	80 91 a7 01 	lds	r24, 0x01A7
    2db8:	81 50       	subi	r24, 0x01	; 1
    2dba:	80 93 a7 01 	sts	0x01A7, r24

						Calc_u8Operation[Calc_u8OperationIndex - 1] = CALC_MUL;
    2dbe:	80 91 a2 01 	lds	r24, 0x01A2
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e8 55       	subi	r30, 0x58	; 88
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	88 e2       	ldi	r24, 0x28	; 40
    2dd0:	80 83       	st	Z, r24
						LCD_enuSendCommand(0x10);
    2dd2:	80 e1       	ldi	r24, 0x10	; 16
    2dd4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
						if (Calc_u8SignFlag)
    2dd8:	80 91 9a 01 	lds	r24, 0x019A
    2ddc:	88 23       	and	r24, r24
    2dde:	59 f0       	breq	.+22     	; 0x2df6 <main+0x482>
						{
							LCD_enuSendCommand(0x10);
    2de0:	80 e1       	ldi	r24, 0x10	; 16
    2de2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
							LCD_enuSendData(Calc_u8PressedKey);
    2de6:	80 91 a1 01 	lds	r24, 0x01A1
    2dea:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
							LCD_enuSendCommand(0x14);
    2dee:	84 e1       	ldi	r24, 0x14	; 20
    2df0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
    2df4:	53 c1       	rjmp	.+678    	; 0x309c <main+0x728>
						}
						else
						{
							LCD_enuSendData(Calc_u8PressedKey);
    2df6:	80 91 a1 01 	lds	r24, 0x01A1
    2dfa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2dfe:	4e c1       	rjmp	.+668    	; 0x309c <main+0x728>
						}
					}
					break;

				case '/':
					if (Calc_u8LastOperandFlag)
    2e00:	80 91 9b 01 	lds	r24, 0x019B
    2e04:	88 23       	and	r24, r24
    2e06:	29 f1       	breq	.+74     	; 0x2e52 <main+0x4de>
					{
						/* Checking if Maximum Operations Number is reached */
						if (Calc_u8OperationIndex == MAX_OPERATIONS)
    2e08:	80 91 a2 01 	lds	r24, 0x01A2
    2e0c:	85 30       	cpi	r24, 0x05	; 5
    2e0e:	21 f4       	brne	.+8      	; 0x2e18 <main+0x4a4>
						{
							Calc_MaxOperationFlag = True;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	80 93 9f 01 	sts	0x019F, r24
    2e16:	42 c1       	rjmp	.+644    	; 0x309c <main+0x728>
						}
						else
						{
							/* Resetting Sign Flag for New Operand */
							Calc_u8SignFlag = False;
    2e18:	10 92 9a 01 	sts	0x019A, r1
							/* Inserting Operation in Operations Array */
							Calc_u8Operation[Calc_u8OperationIndex++] = CALC_DIV;
    2e1c:	20 91 a2 01 	lds	r18, 0x01A2
    2e20:	82 2f       	mov	r24, r18
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	fc 01       	movw	r30, r24
    2e26:	e8 55       	subi	r30, 0x58	; 88
    2e28:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2a:	8e e1       	ldi	r24, 0x1E	; 30
    2e2c:	80 83       	st	Z, r24
    2e2e:	82 2f       	mov	r24, r18
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	80 93 a2 01 	sts	0x01A2, r24
							Calc_u8OperandIndex++;
    2e36:	80 91 ad 01 	lds	r24, 0x01AD
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	80 93 ad 01 	sts	0x01AD, r24

							Calc_u8LastOperandFlag = False;
    2e40:	10 92 9b 01 	sts	0x019B, r1

							/* Displaying The Operator */
							Calc_voidShiftDisp();
    2e44:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_voidShiftDisp>
							LCD_enuSendData(Calc_u8PressedKey);
    2e48:	80 91 a1 01 	lds	r24, 0x01A1
    2e4c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2e50:	25 c1       	rjmp	.+586    	; 0x309c <main+0x728>
						}
					}
					else	/* Replacing Operator on Successive Operators Entry */
					{
						Calc_u8DispDigitsItr--;
    2e52:	80 91 a7 01 	lds	r24, 0x01A7
    2e56:	81 50       	subi	r24, 0x01	; 1
    2e58:	80 93 a7 01 	sts	0x01A7, r24

						Calc_u8Operation[Calc_u8OperationIndex - 1] = CALC_DIV;
    2e5c:	80 91 a2 01 	lds	r24, 0x01A2
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	fc 01       	movw	r30, r24
    2e68:	e8 55       	subi	r30, 0x58	; 88
    2e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6c:	8e e1       	ldi	r24, 0x1E	; 30
    2e6e:	80 83       	st	Z, r24
						LCD_enuSendCommand(0x10);
    2e70:	80 e1       	ldi	r24, 0x10	; 16
    2e72:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
						if (Calc_u8SignFlag)
    2e76:	80 91 9a 01 	lds	r24, 0x019A
    2e7a:	88 23       	and	r24, r24
    2e7c:	59 f0       	breq	.+22     	; 0x2e94 <main+0x520>
						{
							LCD_enuSendCommand(0x10);
    2e7e:	80 e1       	ldi	r24, 0x10	; 16
    2e80:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
							LCD_enuSendData(Calc_u8PressedKey);
    2e84:	80 91 a1 01 	lds	r24, 0x01A1
    2e88:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
							LCD_enuSendCommand(0x14);
    2e8c:	84 e1       	ldi	r24, 0x14	; 20
    2e8e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
    2e92:	04 c1       	rjmp	.+520    	; 0x309c <main+0x728>
						}
						else
						{
							LCD_enuSendData(Calc_u8PressedKey);
    2e94:	80 91 a1 01 	lds	r24, 0x01A1
    2e98:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_enuSendData>
    2e9c:	ff c0       	rjmp	.+510    	; 0x309c <main+0x728>
					break;

				case '=':
					/* Performing Operations on entering '=' Sign */

					Calc_f64Result = Calc_f32Operand[0];
    2e9e:	80 91 ae 01 	lds	r24, 0x01AE
    2ea2:	90 91 af 01 	lds	r25, 0x01AF
    2ea6:	a0 91 b0 01 	lds	r26, 0x01B0
    2eaa:	b0 91 b1 01 	lds	r27, 0x01B1
    2eae:	80 93 a3 01 	sts	0x01A3, r24
    2eb2:	90 93 a4 01 	sts	0x01A4, r25
    2eb6:	a0 93 a5 01 	sts	0x01A5, r26
    2eba:	b0 93 a6 01 	sts	0x01A6, r27
					u8 L_u8Iter = 0;
    2ebe:	1d 8e       	std	Y+29, r1	; 0x1d
					for(L_u8Iter = 0; L_u8Iter < Calc_u8OperationIndex; L_u8Iter++)
    2ec0:	1d 8e       	std	Y+29, r1	; 0x1d
    2ec2:	e0 c0       	rjmp	.+448    	; 0x3084 <main+0x710>
					{
						switch (Calc_u8Operation[L_u8Iter])
    2ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	fc 01       	movw	r30, r24
    2ecc:	e8 55       	subi	r30, 0x58	; 88
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	80 81       	ld	r24, Z
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	3f 8f       	std	Y+31, r19	; 0x1f
    2ed8:	2e 8f       	std	Y+30, r18	; 0x1e
    2eda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2edc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ede:	84 31       	cpi	r24, 0x14	; 20
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <main+0x572>
    2ee4:	3e c0       	rjmp	.+124    	; 0x2f62 <main+0x5ee>
    2ee6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2ee8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2eea:	25 31       	cpi	r18, 0x15	; 21
    2eec:	31 05       	cpc	r19, r1
    2eee:	34 f4       	brge	.+12     	; 0x2efc <main+0x588>
    2ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ef4:	8a 30       	cpi	r24, 0x0A	; 10
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	71 f0       	breq	.+28     	; 0x2f16 <main+0x5a2>
    2efa:	c1 c0       	rjmp	.+386    	; 0x307e <main+0x70a>
    2efc:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2efe:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2f00:	2e 31       	cpi	r18, 0x1E	; 30
    2f02:	31 05       	cpc	r19, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <main+0x594>
    2f06:	79 c0       	rjmp	.+242    	; 0x2ffa <main+0x686>
    2f08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f0c:	88 32       	cpi	r24, 0x28	; 40
    2f0e:	91 05       	cpc	r25, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <main+0x5a0>
    2f12:	4d c0       	rjmp	.+154    	; 0x2fae <main+0x63a>
    2f14:	b4 c0       	rjmp	.+360    	; 0x307e <main+0x70a>
						{
							case CALC_ADD:
								Calc_f64Result += Calc_f32Operand[L_u8Iter + 1];
    2f16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	01 96       	adiw	r24, 0x01	; 1
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	fc 01       	movw	r30, r24
    2f28:	e2 55       	subi	r30, 0x52	; 82
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	a2 81       	ldd	r26, Z+2	; 0x02
    2f32:	b3 81       	ldd	r27, Z+3	; 0x03
    2f34:	20 91 a3 01 	lds	r18, 0x01A3
    2f38:	30 91 a4 01 	lds	r19, 0x01A4
    2f3c:	40 91 a5 01 	lds	r20, 0x01A5
    2f40:	50 91 a6 01 	lds	r21, 0x01A6
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	80 93 a3 01 	sts	0x01A3, r24
    2f54:	90 93 a4 01 	sts	0x01A4, r25
    2f58:	a0 93 a5 01 	sts	0x01A5, r26
    2f5c:	b0 93 a6 01 	sts	0x01A6, r27
    2f60:	8e c0       	rjmp	.+284    	; 0x307e <main+0x70a>
								break;

							case CALC_SUB:
								Calc_f64Result -= Calc_f32Operand[L_u8Iter + 1];
    2f62:	e0 90 a3 01 	lds	r14, 0x01A3
    2f66:	f0 90 a4 01 	lds	r15, 0x01A4
    2f6a:	00 91 a5 01 	lds	r16, 0x01A5
    2f6e:	10 91 a6 01 	lds	r17, 0x01A6
    2f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	88 0f       	add	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 55       	subi	r30, 0x52	; 82
    2f86:	fe 4f       	sbci	r31, 0xFE	; 254
    2f88:	20 81       	ld	r18, Z
    2f8a:	31 81       	ldd	r19, Z+1	; 0x01
    2f8c:	42 81       	ldd	r20, Z+2	; 0x02
    2f8e:	53 81       	ldd	r21, Z+3	; 0x03
    2f90:	c8 01       	movw	r24, r16
    2f92:	b7 01       	movw	r22, r14
    2f94:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	80 93 a3 01 	sts	0x01A3, r24
    2fa0:	90 93 a4 01 	sts	0x01A4, r25
    2fa4:	a0 93 a5 01 	sts	0x01A5, r26
    2fa8:	b0 93 a6 01 	sts	0x01A6, r27
    2fac:	68 c0       	rjmp	.+208    	; 0x307e <main+0x70a>
								break;

							case CALC_MUL:
								Calc_f64Result *= Calc_f32Operand[L_u8Iter + 1];
    2fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fb0:	88 2f       	mov	r24, r24
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e2 55       	subi	r30, 0x52	; 82
    2fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	a2 81       	ldd	r26, Z+2	; 0x02
    2fca:	b3 81       	ldd	r27, Z+3	; 0x03
    2fcc:	20 91 a3 01 	lds	r18, 0x01A3
    2fd0:	30 91 a4 01 	lds	r19, 0x01A4
    2fd4:	40 91 a5 01 	lds	r20, 0x01A5
    2fd8:	50 91 a6 01 	lds	r21, 0x01A6
    2fdc:	bc 01       	movw	r22, r24
    2fde:	cd 01       	movw	r24, r26
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	80 93 a3 01 	sts	0x01A3, r24
    2fec:	90 93 a4 01 	sts	0x01A4, r25
    2ff0:	a0 93 a5 01 	sts	0x01A5, r26
    2ff4:	b0 93 a6 01 	sts	0x01A6, r27
    2ff8:	42 c0       	rjmp	.+132    	; 0x307e <main+0x70a>
								break;

							case CALC_DIV:
								if (Calc_f32Operand[L_u8Iter + 1] == 0)
    2ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	fc 01       	movw	r30, r24
    300c:	e2 55       	subi	r30, 0x52	; 82
    300e:	fe 4f       	sbci	r31, 0xFE	; 254
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	a2 81       	ldd	r26, Z+2	; 0x02
    3016:	b3 81       	ldd	r27, Z+3	; 0x03
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3028:	88 23       	and	r24, r24
    302a:	21 f4       	brne	.+8      	; 0x3034 <main+0x6c0>
								{
									Calc_u8DivisionByZeroFlag = True;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	80 93 9e 01 	sts	0x019E, r24
    3032:	25 c0       	rjmp	.+74     	; 0x307e <main+0x70a>
								}
								else
								{
									Calc_f64Result /= (f32)Calc_f32Operand[L_u8Iter + 1];
    3034:	e0 90 a3 01 	lds	r14, 0x01A3
    3038:	f0 90 a4 01 	lds	r15, 0x01A4
    303c:	00 91 a5 01 	lds	r16, 0x01A5
    3040:	10 91 a6 01 	lds	r17, 0x01A6
    3044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	fc 01       	movw	r30, r24
    3056:	e2 55       	subi	r30, 0x52	; 82
    3058:	fe 4f       	sbci	r31, 0xFE	; 254
    305a:	20 81       	ld	r18, Z
    305c:	31 81       	ldd	r19, Z+1	; 0x01
    305e:	42 81       	ldd	r20, Z+2	; 0x02
    3060:	53 81       	ldd	r21, Z+3	; 0x03
    3062:	c8 01       	movw	r24, r16
    3064:	b7 01       	movw	r22, r14
    3066:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	80 93 a3 01 	sts	0x01A3, r24
    3072:	90 93 a4 01 	sts	0x01A4, r25
    3076:	a0 93 a5 01 	sts	0x01A5, r26
    307a:	b0 93 a6 01 	sts	0x01A6, r27
				case '=':
					/* Performing Operations on entering '=' Sign */

					Calc_f64Result = Calc_f32Operand[0];
					u8 L_u8Iter = 0;
					for(L_u8Iter = 0; L_u8Iter < Calc_u8OperationIndex; L_u8Iter++)
    307e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	8d 8f       	std	Y+29, r24	; 0x1d
    3084:	90 91 a2 01 	lds	r25, 0x01A2
    3088:	8d 8d       	ldd	r24, Y+29	; 0x1d
    308a:	89 17       	cp	r24, r25
    308c:	08 f4       	brcc	.+2      	; 0x3090 <main+0x71c>
    308e:	1a cf       	rjmp	.-460    	; 0x2ec4 <main+0x550>
							default:
								break;
						}
					}

					Calc_u8ResultExistFlag   = True;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	80 93 9c 01 	sts	0x019C, r24
					Calc_u8ResultRequestFlag = True;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 9d 01 	sts	0x019D, r24
						break;
			}


			/* Displayed Digits Number Increment */
			Calc_u8DispDigitsItr++;
    309c:	80 91 a7 01 	lds	r24, 0x01A7
    30a0:	8f 5f       	subi	r24, 0xFF	; 255
    30a2:	80 93 a7 01 	sts	0x01A7, r24


			/* Displaying The Result */
			if (Calc_u8ResultRequestFlag)
    30a6:	80 91 9d 01 	lds	r24, 0x019D
    30aa:	88 23       	and	r24, r24
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <main+0x73c>
    30ae:	76 cc       	rjmp	.-1812   	; 0x299c <main+0x28>
			{
				LCD_enuSendCommand(0xC0);
    30b0:	80 ec       	ldi	r24, 0xC0	; 192
    30b2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
				if (Calc_u8DivisionByZeroFlag)
    30b6:	80 91 9e 01 	lds	r24, 0x019E
    30ba:	88 23       	and	r24, r24
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <main+0x74c>
    30be:	79 c0       	rjmp	.+242    	; 0x31b2 <main+0x83e>
				{
					LCD_enuSendString("Err_Div By 0");
    30c0:	84 e6       	ldi	r24, 0x64	; 100
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_enuSendString>
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	aa e7       	ldi	r26, 0x7A	; 122
    30ce:	b4 e4       	ldi	r27, 0x44	; 68
    30d0:	89 8f       	std	Y+25, r24	; 0x19
    30d2:	9a 8f       	std	Y+26, r25	; 0x1a
    30d4:	ab 8f       	std	Y+27, r26	; 0x1b
    30d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	69 8d       	ldd	r22, Y+25	; 0x19
    30da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a e7       	ldi	r20, 0x7A	; 122
    30e6:	55 e4       	ldi	r21, 0x45	; 69
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	8d 8b       	std	Y+21, r24	; 0x15
    30f2:	9e 8b       	std	Y+22, r25	; 0x16
    30f4:	af 8b       	std	Y+23, r26	; 0x17
    30f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30f8:	6d 89       	ldd	r22, Y+21	; 0x15
    30fa:	7e 89       	ldd	r23, Y+22	; 0x16
    30fc:	8f 89       	ldd	r24, Y+23	; 0x17
    30fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e8       	ldi	r20, 0x80	; 128
    3106:	5f e3       	ldi	r21, 0x3F	; 63
    3108:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    310c:	88 23       	and	r24, r24
    310e:	2c f4       	brge	.+10     	; 0x311a <main+0x7a6>
		__ticks = 1;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9c 8b       	std	Y+20, r25	; 0x14
    3116:	8b 8b       	std	Y+19, r24	; 0x13
    3118:	3f c0       	rjmp	.+126    	; 0x3198 <main+0x824>
	else if (__tmp > 65535)
    311a:	6d 89       	ldd	r22, Y+21	; 0x15
    311c:	7e 89       	ldd	r23, Y+22	; 0x16
    311e:	8f 89       	ldd	r24, Y+23	; 0x17
    3120:	98 8d       	ldd	r25, Y+24	; 0x18
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	4f e7       	ldi	r20, 0x7F	; 127
    3128:	57 e4       	ldi	r21, 0x47	; 71
    312a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    312e:	18 16       	cp	r1, r24
    3130:	4c f5       	brge	.+82     	; 0x3184 <main+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3132:	69 8d       	ldd	r22, Y+25	; 0x19
    3134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e2       	ldi	r20, 0x20	; 32
    3140:	51 e4       	ldi	r21, 0x41	; 65
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	9c 8b       	std	Y+20, r25	; 0x14
    3158:	8b 8b       	std	Y+19, r24	; 0x13
    315a:	0f c0       	rjmp	.+30     	; 0x317a <main+0x806>
    315c:	80 e9       	ldi	r24, 0x90	; 144
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	9a 8b       	std	Y+18, r25	; 0x12
    3162:	89 8b       	std	Y+17, r24	; 0x11
    3164:	89 89       	ldd	r24, Y+17	; 0x11
    3166:	9a 89       	ldd	r25, Y+18	; 0x12
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <main+0x7f4>
    316c:	9a 8b       	std	Y+18, r25	; 0x12
    316e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3170:	8b 89       	ldd	r24, Y+19	; 0x13
    3172:	9c 89       	ldd	r25, Y+20	; 0x14
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	9c 8b       	std	Y+20, r25	; 0x14
    3178:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317a:	8b 89       	ldd	r24, Y+19	; 0x13
    317c:	9c 89       	ldd	r25, Y+20	; 0x14
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	69 f7       	brne	.-38     	; 0x315c <main+0x7e8>
    3182:	14 c0       	rjmp	.+40     	; 0x31ac <main+0x838>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3184:	6d 89       	ldd	r22, Y+21	; 0x15
    3186:	7e 89       	ldd	r23, Y+22	; 0x16
    3188:	8f 89       	ldd	r24, Y+23	; 0x17
    318a:	98 8d       	ldd	r25, Y+24	; 0x18
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9c 8b       	std	Y+20, r25	; 0x14
    3196:	8b 8b       	std	Y+19, r24	; 0x13
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	98 8b       	std	Y+16, r25	; 0x10
    319e:	8f 87       	std	Y+15, r24	; 0x0f
    31a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a2:	98 89       	ldd	r25, Y+16	; 0x10
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <main+0x830>
    31a8:	98 8b       	std	Y+16, r25	; 0x10
    31aa:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					Calc_voidClear();
    31ac:	0e 94 77 19 	call	0x32ee	; 0x32ee <Calc_voidClear>
    31b0:	f5 cb       	rjmp	.-2070   	; 0x299c <main+0x28>
				}
				else if (!Calc_u8LastOperandFlag)
    31b2:	80 91 9b 01 	lds	r24, 0x019B
    31b6:	88 23       	and	r24, r24
    31b8:	09 f0       	breq	.+2      	; 0x31bc <main+0x848>
    31ba:	79 c0       	rjmp	.+242    	; 0x32ae <main+0x93a>
				{
					LCD_enuSendString("Err_Missing Oprd");
    31bc:	81 e7       	ldi	r24, 0x71	; 113
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_enuSendString>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	aa e7       	ldi	r26, 0x7A	; 122
    31ca:	b4 e4       	ldi	r27, 0x44	; 68
    31cc:	8b 87       	std	Y+11, r24	; 0x0b
    31ce:	9c 87       	std	Y+12, r25	; 0x0c
    31d0:	ad 87       	std	Y+13, r26	; 0x0d
    31d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31da:	9e 85       	ldd	r25, Y+14	; 0x0e
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a e7       	ldi	r20, 0x7A	; 122
    31e2:	55 e4       	ldi	r21, 0x45	; 69
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8f 83       	std	Y+7, r24	; 0x07
    31ee:	98 87       	std	Y+8, r25	; 0x08
    31f0:	a9 87       	std	Y+9, r26	; 0x09
    31f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f4:	6f 81       	ldd	r22, Y+7	; 0x07
    31f6:	78 85       	ldd	r23, Y+8	; 0x08
    31f8:	89 85       	ldd	r24, Y+9	; 0x09
    31fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <main+0x8a2>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <main+0x920>
	else if (__tmp > 65535)
    3216:	6f 81       	ldd	r22, Y+7	; 0x07
    3218:	78 85       	ldd	r23, Y+8	; 0x08
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	9a 85       	ldd	r25, Y+10	; 0x0a
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <main+0x90c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3230:	7c 85       	ldd	r23, Y+12	; 0x0c
    3232:	8d 85       	ldd	r24, Y+13	; 0x0d
    3234:	9e 85       	ldd	r25, Y+14	; 0x0e
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9e 83       	std	Y+6, r25	; 0x06
    3254:	8d 83       	std	Y+5, r24	; 0x05
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <main+0x902>
    3258:	80 e9       	ldi	r24, 0x90	; 144
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	9c 83       	std	Y+4, r25	; 0x04
    325e:	8b 83       	std	Y+3, r24	; 0x03
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <main+0x8f0>
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <main+0x8e4>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <main+0x934>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	8d 81       	ldd	r24, Y+5	; 0x05
    3296:	9e 81       	ldd	r25, Y+6	; 0x06
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <main+0x92c>
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					Calc_voidClear();
    32a8:	0e 94 77 19 	call	0x32ee	; 0x32ee <Calc_voidClear>
    32ac:	77 cb       	rjmp	.-2322   	; 0x299c <main+0x28>
				}
				else
				{
					if (Calc_u8DispDigitsItr >= LCD_WIDTH)
    32ae:	80 91 a7 01 	lds	r24, 0x01A7
    32b2:	80 31       	cpi	r24, 0x10	; 16
    32b4:	68 f0       	brcs	.+26     	; 0x32d0 <main+0x95c>
    32b6:	08 c0       	rjmp	.+16     	; 0x32c8 <main+0x954>
					{
						/* Shifting Back The Display to Normal */
						for( ; Calc_u8DispDigitsItr > (LCD_WIDTH + 1); Calc_u8DispDigitsItr--)
						{
							LCD_enuSendCommand(0x1C);
    32b8:	8c e1       	ldi	r24, 0x1C	; 28
    32ba:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
				else
				{
					if (Calc_u8DispDigitsItr >= LCD_WIDTH)
					{
						/* Shifting Back The Display to Normal */
						for( ; Calc_u8DispDigitsItr > (LCD_WIDTH + 1); Calc_u8DispDigitsItr--)
    32be:	80 91 a7 01 	lds	r24, 0x01A7
    32c2:	81 50       	subi	r24, 0x01	; 1
    32c4:	80 93 a7 01 	sts	0x01A7, r24
    32c8:	80 91 a7 01 	lds	r24, 0x01A7
    32cc:	82 31       	cpi	r24, 0x12	; 18
    32ce:	a0 f7       	brcc	.-24     	; 0x32b8 <main+0x944>
						{
							LCD_enuSendCommand(0x1C);
						}
					}
					else { /* Do Nothing */ }
					LCD_enuSendNum(Calc_f64Result);
    32d0:	80 91 a3 01 	lds	r24, 0x01A3
    32d4:	90 91 a4 01 	lds	r25, 0x01A4
    32d8:	a0 91 a5 01 	lds	r26, 0x01A5
    32dc:	b0 91 a6 01 	lds	r27, 0x01A6
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_enuSendNum>
					Calc_u8ResultRequestFlag = False;
    32e8:	10 92 9d 01 	sts	0x019D, r1
    32ec:	57 cb       	rjmp	.-2386   	; 0x299c <main+0x28>

000032ee <Calc_voidClear>:
	return 0;
}


void Calc_voidClear (void)
{
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	0f 92       	push	r0
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8Itr = 0;
    32f8:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuSendCommand(0x01);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
	LCD_enuSendCommand(0x80);
    3300:	80 e8       	ldi	r24, 0x80	; 128
    3302:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>

	for(L_u8Itr = 0; L_u8Itr < MAX_OPERATIONS; L_u8Itr++)
    3306:	19 82       	std	Y+1, r1	; 0x01
    3308:	0a c0       	rjmp	.+20     	; 0x331e <Calc_voidClear+0x30>
	{
		Calc_u8Operation[L_u8Itr] = 0;
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	88 2f       	mov	r24, r24
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	fc 01       	movw	r30, r24
    3312:	e8 55       	subi	r30, 0x58	; 88
    3314:	fe 4f       	sbci	r31, 0xFE	; 254
    3316:	10 82       	st	Z, r1
	u8 L_u8Itr = 0;

	LCD_enuSendCommand(0x01);
	LCD_enuSendCommand(0x80);

	for(L_u8Itr = 0; L_u8Itr < MAX_OPERATIONS; L_u8Itr++)
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	85 30       	cpi	r24, 0x05	; 5
    3322:	98 f3       	brcs	.-26     	; 0x330a <Calc_voidClear+0x1c>
	{
		Calc_u8Operation[L_u8Itr] = 0;
	}
	for(L_u8Itr = 0; L_u8Itr <= MAX_OPERATIONS; L_u8Itr++)
    3324:	19 82       	std	Y+1, r1	; 0x01
    3326:	15 c0       	rjmp	.+42     	; 0x3352 <Calc_voidClear+0x64>
	{
		Calc_f32Operand[L_u8Itr] = 0;
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	fc 01       	movw	r30, r24
    3338:	e2 55       	subi	r30, 0x52	; 82
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	a0 e0       	ldi	r26, 0x00	; 0
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	80 83       	st	Z, r24
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	a2 83       	std	Z+2, r26	; 0x02
    334a:	b3 83       	std	Z+3, r27	; 0x03

	for(L_u8Itr = 0; L_u8Itr < MAX_OPERATIONS; L_u8Itr++)
	{
		Calc_u8Operation[L_u8Itr] = 0;
	}
	for(L_u8Itr = 0; L_u8Itr <= MAX_OPERATIONS; L_u8Itr++)
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	86 30       	cpi	r24, 0x06	; 6
    3356:	40 f3       	brcs	.-48     	; 0x3328 <Calc_voidClear+0x3a>
	{
		Calc_f32Operand[L_u8Itr] = 0;
	}

	Calc_u8OperationIndex = 0;
    3358:	10 92 a2 01 	sts	0x01A2, r1
	Calc_u8OperandIndex   = 0;
    335c:	10 92 ad 01 	sts	0x01AD, r1

	Calc_u8SignFlag				= False;
    3360:	10 92 9a 01 	sts	0x019A, r1
	Calc_u8LastOperandFlag		= False;
    3364:	10 92 9b 01 	sts	0x019B, r1
	Calc_u8ResultExistFlag		= False;
    3368:	10 92 9c 01 	sts	0x019C, r1
	Calc_u8ResultRequestFlag	= False;
    336c:	10 92 9d 01 	sts	0x019D, r1
	Calc_u8DivisionByZeroFlag	= False;
    3370:	10 92 9e 01 	sts	0x019E, r1
	Calc_MaxOperationFlag		= False;
    3374:	10 92 9f 01 	sts	0x019F, r1
	Calc_LastEnteredOperand		= False;
    3378:	10 92 a0 01 	sts	0x01A0, r1

	Calc_u8DispDigitsItr = 0;
    337c:	10 92 a7 01 	sts	0x01A7, r1
}
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <Calc_voidShiftDisp>:


void Calc_voidShiftDisp (void)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
	if (Calc_u8DispDigitsItr >= LCD_WIDTH)
    3390:	80 91 a7 01 	lds	r24, 0x01A7
    3394:	80 31       	cpi	r24, 0x10	; 16
    3396:	18 f0       	brcs	.+6      	; 0x339e <Calc_voidShiftDisp+0x16>
	{
		LCD_enuSendCommand(0x18);
    3398:	88 e1       	ldi	r24, 0x18	; 24
    339a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_enuSendCommand>
	}
	else{ /* Do Nothing */ }
}
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <__mulsi3>:
    33a4:	62 9f       	mul	r22, r18
    33a6:	d0 01       	movw	r26, r0
    33a8:	73 9f       	mul	r23, r19
    33aa:	f0 01       	movw	r30, r0
    33ac:	82 9f       	mul	r24, r18
    33ae:	e0 0d       	add	r30, r0
    33b0:	f1 1d       	adc	r31, r1
    33b2:	64 9f       	mul	r22, r20
    33b4:	e0 0d       	add	r30, r0
    33b6:	f1 1d       	adc	r31, r1
    33b8:	92 9f       	mul	r25, r18
    33ba:	f0 0d       	add	r31, r0
    33bc:	83 9f       	mul	r24, r19
    33be:	f0 0d       	add	r31, r0
    33c0:	74 9f       	mul	r23, r20
    33c2:	f0 0d       	add	r31, r0
    33c4:	65 9f       	mul	r22, r21
    33c6:	f0 0d       	add	r31, r0
    33c8:	99 27       	eor	r25, r25
    33ca:	72 9f       	mul	r23, r18
    33cc:	b0 0d       	add	r27, r0
    33ce:	e1 1d       	adc	r30, r1
    33d0:	f9 1f       	adc	r31, r25
    33d2:	63 9f       	mul	r22, r19
    33d4:	b0 0d       	add	r27, r0
    33d6:	e1 1d       	adc	r30, r1
    33d8:	f9 1f       	adc	r31, r25
    33da:	bd 01       	movw	r22, r26
    33dc:	cf 01       	movw	r24, r30
    33de:	11 24       	eor	r1, r1
    33e0:	08 95       	ret

000033e2 <__udivmodsi4>:
    33e2:	a1 e2       	ldi	r26, 0x21	; 33
    33e4:	1a 2e       	mov	r1, r26
    33e6:	aa 1b       	sub	r26, r26
    33e8:	bb 1b       	sub	r27, r27
    33ea:	fd 01       	movw	r30, r26
    33ec:	0d c0       	rjmp	.+26     	; 0x3408 <__udivmodsi4_ep>

000033ee <__udivmodsi4_loop>:
    33ee:	aa 1f       	adc	r26, r26
    33f0:	bb 1f       	adc	r27, r27
    33f2:	ee 1f       	adc	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	a2 17       	cp	r26, r18
    33f8:	b3 07       	cpc	r27, r19
    33fa:	e4 07       	cpc	r30, r20
    33fc:	f5 07       	cpc	r31, r21
    33fe:	20 f0       	brcs	.+8      	; 0x3408 <__udivmodsi4_ep>
    3400:	a2 1b       	sub	r26, r18
    3402:	b3 0b       	sbc	r27, r19
    3404:	e4 0b       	sbc	r30, r20
    3406:	f5 0b       	sbc	r31, r21

00003408 <__udivmodsi4_ep>:
    3408:	66 1f       	adc	r22, r22
    340a:	77 1f       	adc	r23, r23
    340c:	88 1f       	adc	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	1a 94       	dec	r1
    3412:	69 f7       	brne	.-38     	; 0x33ee <__udivmodsi4_loop>
    3414:	60 95       	com	r22
    3416:	70 95       	com	r23
    3418:	80 95       	com	r24
    341a:	90 95       	com	r25
    341c:	9b 01       	movw	r18, r22
    341e:	ac 01       	movw	r20, r24
    3420:	bd 01       	movw	r22, r26
    3422:	cf 01       	movw	r24, r30
    3424:	08 95       	ret

00003426 <__prologue_saves__>:
    3426:	2f 92       	push	r2
    3428:	3f 92       	push	r3
    342a:	4f 92       	push	r4
    342c:	5f 92       	push	r5
    342e:	6f 92       	push	r6
    3430:	7f 92       	push	r7
    3432:	8f 92       	push	r8
    3434:	9f 92       	push	r9
    3436:	af 92       	push	r10
    3438:	bf 92       	push	r11
    343a:	cf 92       	push	r12
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	ca 1b       	sub	r28, r26
    3450:	db 0b       	sbc	r29, r27
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	09 94       	ijmp

0000345e <__epilogue_restores__>:
    345e:	2a 88       	ldd	r2, Y+18	; 0x12
    3460:	39 88       	ldd	r3, Y+17	; 0x11
    3462:	48 88       	ldd	r4, Y+16	; 0x10
    3464:	5f 84       	ldd	r5, Y+15	; 0x0f
    3466:	6e 84       	ldd	r6, Y+14	; 0x0e
    3468:	7d 84       	ldd	r7, Y+13	; 0x0d
    346a:	8c 84       	ldd	r8, Y+12	; 0x0c
    346c:	9b 84       	ldd	r9, Y+11	; 0x0b
    346e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3470:	b9 84       	ldd	r11, Y+9	; 0x09
    3472:	c8 84       	ldd	r12, Y+8	; 0x08
    3474:	df 80       	ldd	r13, Y+7	; 0x07
    3476:	ee 80       	ldd	r14, Y+6	; 0x06
    3478:	fd 80       	ldd	r15, Y+5	; 0x05
    347a:	0c 81       	ldd	r16, Y+4	; 0x04
    347c:	1b 81       	ldd	r17, Y+3	; 0x03
    347e:	aa 81       	ldd	r26, Y+2	; 0x02
    3480:	b9 81       	ldd	r27, Y+1	; 0x01
    3482:	ce 0f       	add	r28, r30
    3484:	d1 1d       	adc	r29, r1
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	ed 01       	movw	r28, r26
    3492:	08 95       	ret

00003494 <_exit>:
    3494:	f8 94       	cli

00003496 <__stop_program>:
    3496:	ff cf       	rjmp	.-2      	; 0x3496 <__stop_program>
